<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Liu Lixiang的博客</title><link href="/" rel="alternate"></link><link href="/feeds/dotnet.atom.xml" rel="self"></link><id>/</id><updated>2014-12-04T22:15:00+08:00</updated><entry><title>ASP.NET MVC5 学习笔记-5 测试</title><link href="/aspnet-mvc5-xue-xi-bi-ji-5-ce-shi.html" rel="alternate"></link><published>2014-12-04T22:15:00+08:00</published><author><name>刘理想</name></author><id>tag:,2014-12-04:aspnet-mvc5-xue-xi-bi-ji-5-ce-shi.html</id><summary type="html">
&lt;h1 id="aspnet-mvc5-5"&gt;ASP.NET MVC5 学习笔记-5 测试&lt;/h1&gt;
&lt;h2 id="1"&gt;1. 测试步骤&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;准备&lt;/li&gt;
&lt;li&gt;执行&lt;/li&gt;
&lt;li&gt;检查&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="2"&gt;2. 创建单元测试&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;注意：单元测试不要包含数据库操作，包含数据库操作的一般成为集成测试。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id="21"&gt;2.1 编写测试代码&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;namespace AspNetMVCEssential.Tests.Controllers
{
    [TestClass]
    public class HomeControllerTest
    {
        [TestMethod]
        public void Index()
        {
            // Arrange
            HomeController controller = new HomeController();

            // Act
            ViewResult result = controller.Index() as ViewResult;

            // Assert
            Assert.IsNotNull(result);
        }

        [TestMethod]
        public void About()
        {
            // Arrange
            HomeController controller = new HomeController();

            // Act
            ViewResult result = controller.About() as ViewResult;

            // Assert
            Assert.AreEqual("Your application description page.", result.ViewBag.Message);
        }

        [TestMethod]
        public void Contact()
        {
            // Arrange
            HomeController controller = new HomeController();

            // Act
            ViewResult result = controller.Contact() as ViewResult;

            // Assert
            Assert.IsNotNull(result);
        }
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="22"&gt;2.2 运行测试&lt;/h3&gt;
&lt;p&gt;选定菜单“测试”-&amp;gt;“运行”-&amp;gt;运行所有测试或者未成功的测试。
可以在“测试”-&amp;gt;“窗口”-&amp;gt;“测试资源管理器”中对测试进行管理。&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="3-mock"&gt;3 Mock测试&lt;/h2&gt;
&lt;p&gt;Mock测试就是在测试过程中，对于某些不容易构造或者不容易获取的对象，用一个虚拟的对象来创建以便测试的测试方法。&lt;/p&gt;
&lt;p&gt;我们要对&lt;code&gt;TransactionController.cs&lt;/code&gt;进行测试，直接操作数据库不行，怎么办呢？我们可以使用虚拟的接口来进行测试。这需要我们更改一些代码.&lt;/p&gt;
&lt;h3 id="31-transactioncontrollercs"&gt;3.1 首先，我们更改&lt;code&gt;TransactionController.cs&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;更改db为&lt;code&gt;IApplicationDbContext&lt;/code&gt;类型，并且添加构造方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;private IApplicationDbContext db;

//实际使用
public TransactionController()
{
    db = new ApplicationDbContext();
}

//生成使用
public TransactionController(IApplicationDbContext dbContext)
{
    db = dbContext;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="32-iapplicationdbcontext"&gt;3.2 创建IApplicationDbContext对象&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public interface IApplication
{
    IDbSet&amp;lt;CheckingAccount&amp;gt; CheckingAccounts{get;set;}
    IDbSet&amp;lt;Transaction&amp;gt; Transactions{get; set;}

    public int SaveChanges();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;让实际的ApplicationDbContext实现IApplicationDbContext。&lt;/p&gt;
&lt;p&gt;另外创建一个假的FakeApplicationDbContext实现IApplicationDbContext&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class FakeApplicationDbContext:IApplicationDbContext
{
    IDbSet&amp;lt;CheckingAccount&amp;gt; CheckingAccounts{get;set;}
    IDbSet&amp;lt;Transaction&amp;gt; Transactions{get; set;}

    public int SaveChanges(){return 0}
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再创建一个FakeDbSet&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace EntityExtensions {
    public class FakeDbSet&amp;lt;T&amp;gt; : System.Data.Entity.IDbSet&amp;lt;T&amp;gt; where T : class {
        private readonly List&amp;lt;T&amp;gt; list = new List&amp;lt;T&amp;gt;();

        public FakeDbSet() {
            list = new List&amp;lt;T&amp;gt;();
        }

        public FakeDbSet(IEnumerable&amp;lt;T&amp;gt; contents) {
            this.list = contents.ToList();
        }

        #region IDbSet&amp;lt;T&amp;gt; Members

        public T Add(T entity) {
            this.list.Add(entity);
            return entity;
        }

        public T Attach(T entity) {
            this.list.Add(entity);
            return entity;
        }

        public TDerivedEntity Create&amp;lt;TDerivedEntity&amp;gt;() where TDerivedEntity : class, T {
            throw new NotImplementedException();
        }

        public T Create() {
            throw new NotImplementedException();
        }

        public T Find(params object[] keyValues) {
            throw new NotImplementedException();
        }

        public System.Collections.ObjectModel.ObservableCollection&amp;lt;T&amp;gt; Local {
            get {
                throw new NotImplementedException();
            }
        }

        public T Remove(T entity) {
            this.list.Remove(entity);
            return entity;
        }

        #endregion

        #region IEnumerable&amp;lt;T&amp;gt; Members

        public IEnumerator&amp;lt;T&amp;gt; GetEnumerator() {
            return this.list.GetEnumerator();
        }

        #endregion

        #region IEnumerable Members

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() {
            return this.list.GetEnumerator();
        }

        #endregion

        #region IQueryable Members

        public Type ElementType {
            get { return this.list.AsQueryable().ElementType; }
        }

        public System.Linq.Expressions.Expression Expression {
            get { return this.list.AsQueryable().Expression; }
        }

        public IQueryProvider Provider {
            get { return this.list.AsQueryable().Provider; }
        }

        #endregion
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另外一种方法是使用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Install-Package FakeDbSet
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="4-tdd"&gt;4 TDD&lt;/h2&gt;
&lt;h3 id="41-tdd"&gt;4.1 TDD基本流程&lt;/h3&gt;
&lt;p&gt;创建失败的测试
用最简单的方法实现
优化&lt;/p&gt;
&lt;h3 id="42"&gt;4.2 创建测试&lt;/h3&gt;
&lt;p&gt;注意，测试应该也引用EF。&lt;/p&gt;</summary><category term="DotNet"></category><category term="Web"></category><category term="ASP.NET MVC"></category></entry><entry><title>ASP.NET MVC5 学习笔记-3 Model</title><link href="/aspnet-mvc5-xue-xi-bi-ji-3-model.html" rel="alternate"></link><published>2014-10-31T20:48:00+08:00</published><author><name>刘理想</name></author><id>tag:,2014-10-31:aspnet-mvc5-xue-xi-bi-ji-3-model.html</id><summary type="html">
&lt;h1 id="aspnet-mvc5-3-model"&gt;ASP.NET MVC5 学习笔记-3 Model&lt;/h1&gt;
&lt;h2 id="1-model"&gt;1. Model&lt;/h2&gt;
&lt;h3 id="11"&gt;1.1 添加一个模型&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;，添加属性时可以输入"prop"，会自动输入代码段。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class CheckoutAccount
{
    public int Id { get; set; }

    public string AccountNumber { get; set; }

    public string FirstName { get; set; }

    public string LastName { get; set; }

    public string Balance { get; set; }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="12-mvc-5checkingaccountcontroller"&gt;1.2 添加一个“包含读写操作的MVC 5控制器”CheckingAccountController&lt;/h3&gt;
&lt;p&gt;去掉Details的参数Id，因为现在我没还没有数据库。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public ActionResult Details()
{
    return View();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="13-details"&gt;1.3 在Details上添加视图&lt;/h3&gt;
&lt;p&gt;在Details动作上右键，添加视图：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;视图名称&lt;code&gt;Details&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;模板&lt;code&gt;Details&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;模型&lt;code&gt;CheckoutAccount&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;数据上下文类：空&lt;/li&gt;
&lt;li&gt;创建为分布视图：不勾选&lt;/li&gt;
&lt;li&gt;引用脚本库：不勾选&lt;/li&gt;
&lt;li&gt;使用布局页：默认布局&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@model AspNetMVCEssential.Models.CheckoutAccount

@{
    ViewBag.Title = "Details";
}

&lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Details&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h4&amp;gt;&lt;/span&gt;CheckoutAccount&lt;span class="nt"&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;hr&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;dl&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"dl-horizontal"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;dt&amp;gt;&lt;/span&gt;
            @Html.DisplayNameFor(model =&amp;gt; model.AccountNumber)
        &lt;span class="nt"&gt;&amp;lt;/dt&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;dd&amp;gt;&lt;/span&gt;
            @Html.DisplayFor(model =&amp;gt; model.AccountNumber)
        &lt;span class="nt"&gt;&amp;lt;/dd&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;dt&amp;gt;&lt;/span&gt;
            @Html.DisplayNameFor(model =&amp;gt; model.FirstName)
        &lt;span class="nt"&gt;&amp;lt;/dt&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;dd&amp;gt;&lt;/span&gt;
            @Html.DisplayFor(model =&amp;gt; model.FirstName)
        &lt;span class="nt"&gt;&amp;lt;/dd&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;dt&amp;gt;&lt;/span&gt;
            @Html.DisplayNameFor(model =&amp;gt; model.LastName)
        &lt;span class="nt"&gt;&amp;lt;/dt&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;dd&amp;gt;&lt;/span&gt;
            @Html.DisplayFor(model =&amp;gt; model.LastName)
        &lt;span class="nt"&gt;&amp;lt;/dd&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;dt&amp;gt;&lt;/span&gt;
            @Html.DisplayNameFor(model =&amp;gt; model.Balance)
        &lt;span class="nt"&gt;&amp;lt;/dt&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;dd&amp;gt;&lt;/span&gt;
            @Html.DisplayFor(model =&amp;gt; model.Balance)
        &lt;span class="nt"&gt;&amp;lt;/dd&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;/dl&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    @Html.ActionLink("Edit", "Edit", new { id = Model.Id }) |
    @Html.ActionLink("Back to List", "Index")
&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一行代码指明模板Model类型，任何@Model都是&lt;code&gt;CheckoutAccount&lt;/code&gt;类型。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Html.DisplayNameFor(model =&amp;gt; model.AccountNumber)&lt;/code&gt;模型属性的名称&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Html.DisplayFor(model =&amp;gt; model.AccountNumber)&lt;/code&gt;模型属性的值&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="14-details"&gt;1.4 添加首页到Details页面的链接&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"col-md-6 margin-top-20"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"@Url.Action("&lt;/span&gt;&lt;span class="err"&gt;Details",&lt;/span&gt; &lt;span class="err"&gt;"CheckingAccount")"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-primary btn-lg btn-block"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"glyphicon glyphicon-question-sign"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;余额查询&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;@Url.Action("action", "controller")&lt;/code&gt;返回URL，而不是&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="2"&gt;2. 显示和验证模型属性&lt;/h2&gt;
&lt;h3 id="21-details"&gt;2.1 清理Details视图&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@model AspNetMVCEssential.Models.CheckoutAccount

@{
    ViewBag.Title = "Details";
}
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"row"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"col-md-6 col-md-offset-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;账户查询&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;dl&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"dl-horizontal"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;dt&amp;gt;&lt;/span&gt;
                @Html.DisplayNameFor(model =&amp;gt; model.AccountNumber)
            &lt;span class="nt"&gt;&amp;lt;/dt&amp;gt;&lt;/span&gt;

            &lt;span class="nt"&gt;&amp;lt;dd&amp;gt;&lt;/span&gt;
                @Html.DisplayFor(model =&amp;gt; model.AccountNumber)
            &lt;span class="nt"&gt;&amp;lt;/dd&amp;gt;&lt;/span&gt;

            &lt;span class="nt"&gt;&amp;lt;dt&amp;gt;&lt;/span&gt;
                @Html.DisplayNameFor(model =&amp;gt; model.FirstName)
            &lt;span class="nt"&gt;&amp;lt;/dt&amp;gt;&lt;/span&gt;

            &lt;span class="nt"&gt;&amp;lt;dd&amp;gt;&lt;/span&gt;
                @Html.DisplayFor(model =&amp;gt; model.FirstName)
            &lt;span class="nt"&gt;&amp;lt;/dd&amp;gt;&lt;/span&gt;

            &lt;span class="nt"&gt;&amp;lt;dt&amp;gt;&lt;/span&gt;
                @Html.DisplayNameFor(model =&amp;gt; model.LastName)
            &lt;span class="nt"&gt;&amp;lt;/dt&amp;gt;&lt;/span&gt;

            &lt;span class="nt"&gt;&amp;lt;dd&amp;gt;&lt;/span&gt;
                @Html.DisplayFor(model =&amp;gt; model.LastName)
            &lt;span class="nt"&gt;&amp;lt;/dd&amp;gt;&lt;/span&gt;

            &lt;span class="nt"&gt;&amp;lt;dt&amp;gt;&lt;/span&gt;
                @Html.DisplayNameFor(model =&amp;gt; model.Balance)
            &lt;span class="nt"&gt;&amp;lt;/dt&amp;gt;&lt;/span&gt;

            &lt;span class="nt"&gt;&amp;lt;dd&amp;gt;&lt;/span&gt;
                @Html.DisplayFor(model =&amp;gt; model.Balance)
            &lt;span class="nt"&gt;&amp;lt;/dd&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/dl&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="22-model"&gt;2.2 修改Model&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;[Display(Name="Account")]&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class CheckoutAccount
{
    public int Id { get; set; }

    [Display(Name = "账户")]
    public string AccountNumber { get; set; }

    public string FirstName { get; set; }

    public string LastName { get; set; }
    [Display(Name = "姓名")]
    public string Name { get { return FirstName + " " + LastName; } }
    [DataType(DataType.Currency)]
    public int Balance { get; set; }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="23-create"&gt;2.3 创建Create对应的视图&lt;/h3&gt;
&lt;p&gt;此时要选择引用脚本库。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()

    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-horizontal"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h4&amp;gt;&lt;/span&gt;CheckoutAccount&lt;span class="nt"&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;hr&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        @Html.ValidationSummary(true)

        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-group"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            @Html.LabelFor(model =&amp;gt; model.AccountNumber, new { @class = "control-label col-md-2" })
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"col-md-10"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                @Html.EditorFor(model =&amp;gt; model.AccountNumber)
                @Html.ValidationMessageFor(model =&amp;gt; model.AccountNumber)
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
     ...
 }
 ```

- `@Html.LabelFor(model=&amp;gt;model.Account)`产生Label
- `@Html.EditorFor(model=&amp;gt;model.Account)`产生input
- `@Html.ValidationMessageFor(model=&amp;gt;model.AccountNumber)`验证信息
- `@Html.ValidationSummary(true)`验证汇总

###2.4 修改CheckAccount
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;[Required]
//[StringLength(10, MinimumLength = 6)]
[RegularExpression(@"\d{6,10}", ErrorMessage = "账户必须是6-10个字符")]
[Display(Name = "账户")]
public string AccountNumber { get; set; }&lt;/p&gt;
&lt;p&gt;[Required]
public string FirstName { get; set; }&lt;/p&gt;
&lt;p&gt;[Required]
public string LastName { get; set; }
[Display(Name = "姓名")]
public string Name { get { return FirstName + " " + LastName; } }&lt;/p&gt;
&lt;p&gt;[Required]
[DataType(DataType.Currency)]
public int Balance { get; set; }&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;都是一些验证字段，注意每个都可以有`ErrorMessage`参数。

--

##3. ViewModel

ViewModel不在数据库中存储，专门用于处理Form，类似Django中的Form类。

###3.1 ViewModel定义

打开Models文件夹下的AccountViewModel，我们看到ViewModel定义与普通Model并没有明显区别，只是命名约定都是以"ViewModel"结尾。
&lt;/pre&gt;&lt;/div&gt;
&lt;p _="
" _display_name="[Display(Name" _required_="[Required]
"&gt;public class LoginViewModel&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[Required]&lt;/span&gt;
&lt;span class="k"&gt;[DataType(DataType.Password)]&lt;/span&gt;
&lt;span class="k"&gt;[Display(Name = "密码")]&lt;/span&gt;
&lt;span class="err"&gt;public&lt;/span&gt; &lt;span class="err"&gt;string&lt;/span&gt; &lt;span class="err"&gt;Password&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt; &lt;span class="err"&gt;get&lt;/span&gt;&lt;span class="c1"&gt;; set; }&lt;/span&gt;

&lt;span class="k"&gt;[Display(Name = "记住我?")]&lt;/span&gt;
&lt;span class="err"&gt;public&lt;/span&gt; &lt;span class="err"&gt;bool&lt;/span&gt; &lt;span class="err"&gt;RememberMe&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt; &lt;span class="err"&gt;get&lt;/span&gt;&lt;span class="c1"&gt;; set; }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;###3.2 ViewModel在Action中的应用
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;[HttpPost]
[AllowAnonymous]
[ValidateAntiForgeryToken]
public async Task&lt;actionresult&gt; Login(LoginViewModel model, string returnUrl)
{
    if (ModelState.IsValid)
    {
        var user = await UserManager.FindAsync(model.UserName, model.Password);
        if (user != null)
        {
            await SignInAsync(user, model.RememberMe);
            return RedirectToLocal(returnUrl);
        }
        else
        {
            ModelState.AddModelError("", "Invalid username or password.");
        }
    }&lt;/actionresult&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// 如果我们进行到这一步时某个地方出错，则重新显示表单
return View(model);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;可以看到ViewModel只是接收用户的输入并封装，然后再使用封装的字段查找数据库中对应的Model。

###3.3 ViewModel在视图中的应用
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;@model AspNetMVCEssential.Models.LoginViewModel&lt;/p&gt;
&lt;p&gt;@{
    ViewBag.Title = "登录";
}&lt;/p&gt;
&lt;h2&gt;@ViewBag.Title。&lt;/h2&gt;
&lt;div class="row"&gt;
&lt;div class="col-md-8"&gt;
&lt;section id="loginForm"&gt;
            @using (Html.BeginForm("Login", "Account", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
            {
                @Html.AntiForgeryToken()
                &lt;h4&gt;使用本地帐户登录。&lt;/h4&gt;
&lt;hr/&gt;
                @Html.ValidationSummary(true)
                &lt;div class="form-group"&gt;
                    @Html.LabelFor(m =&amp;gt; m.UserName, new { @class = "col-md-2 control-label" })
                    &lt;div class="col-md-10"&gt;
                        @Html.TextBoxFor(m =&amp;gt; m.UserName, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m =&amp;gt; m.UserName)
                    &lt;/div&gt;
&lt;/div&gt;
                ...
            }
             ...

wzxhzdk:10

public class ApplicationDbContext : IdentityDbContext&lt;applicationuser&gt;
{
    public ApplicationDbContext()
        : base("DefaultConnection")
    {
    }

    public DbSet&lt;checkoutaccount&gt; CheckoutAccounts { get; set; }
}

wzxhzdk:11

public virtual ApplicationUser User { get; set; }
public string ApplicationUserId { get; set; }

wzxhzdk:12

[HttpPost]
[AllowAnonymous]
[ValidateAntiForgeryToken]
public async Task&lt;actionresult&gt; Register(RegisterViewModel model)
{
    if (ModelState.IsValid)
    {
        var user = new ApplicationUser() { UserName = model.Email, Email = model.Email};
        var result = await UserManager.CreateAsync(user, model.Password);
        if (result.Succeeded)
        {
            //创建CheckoutAcount
            var db = new ApplicationDbContext();
            var checkoutAccount = new CheckoutAccount
            {
                AccountNumber = "00000123",
                FirstName = model.FirstName,
                LastName = model.LastName,
                Balance = 0,
                ApplicationUserId = user.Id
            };
            db.CheckoutAccounts.Add(checkoutAccount);
            db.SaveChanges();

            await SignInAsync(user, isPersistent: false);
            return RedirectToAction("Index", "Home");
        }
        else
        {
            AddErrors(result);
        }
    }

    // 如果我们进行到这一步时某个地方出错，则重新显示表单
    return View(model);
}

wzxhzdk:13

return View(model);

wzxhzdk:14

@model MvcMovie.Models.Movie

@{
    ViewBag.Title = "Details";
}

&lt;h2&gt;Details&lt;/h2&gt;
&lt;div&gt;
&lt;h4&gt;Movie&lt;/h4&gt;
&lt;hr/&gt;
&lt;dl class="dl-horizontal"&gt;
&lt;dt&gt;
            @Html.DisplayNameFor(model =&amp;gt; model.Title)
        &lt;/dt&gt;
         @*Markup omitted for clarity.*@        
    &lt;/dl&gt;
&lt;/div&gt;
&lt;p&gt;
    @Html.ActionLink("Edit", "Edit", new { id = Model.ID }) |
    @Html.ActionLink("Back to List", "Index")
&lt;/p&gt;

wzxhzdk:15

@model IEnumerable&lt;mvcmovie.models.movie&gt; 
@foreach (var item in Model) {
    &lt;tr&gt;
&lt;td&gt;
            @Html.DisplayFor(modelItem =&amp;gt; item.Title)
        &lt;/td&gt;
&lt;td&gt;
            @Html.ActionLink("Edit", "Edit", new { id=item.ID }) 
        &lt;/td&gt;
&lt;/tr&gt;
}

wzxhzdk:16

[Required]
[StringLength(10)]
[Column(TypeName = "varchar")]
[RegularExpression(@"\d{6,10}", ErrorMessage = "账户必须是6-10个字符")]
[Display(Name = "账户")]
public string AccountNumber { get; set; }

wzxhzdk:17

PM&amp;gt; Enable-Migrations -ContextType ApplicationDbContext
正在检查上下文的目标是否为现有数据库...
检测到使用数据库初始值设定项创建的数据库。已搭建与现有数据库对应的迁移“201410311619291_InitialCreate”的基架。若要改用自动迁移，请删除 Migrations 文件夹并重新运行指定了 -EnableAutomaticMigrations 参数的 Enable-Migrations。
已为项目 AspNetMVCEssential 启用 Code First 迁移。

wzxhzdk:18

PM&amp;gt; Add-Migration AccountNumberChanges
正在为迁移“AccountNumberChanges”搭建基架。
此迁移文件的设计器代码包含当前 Code First 模型的快照。在下一次搭建迁移基架时，将使用此快照计算对模型的更改。如果对要包含在此迁移中的模型进行其他更改，则您可通过再次运行“Add-Migration AccountNumberChanges”重新搭建基架。

wzxhzdk:19

PM&amp;gt; Update-Database -Script
正在应用显式迁移: [201410311643166_AccountNumberChanges]。
正在应用显式迁移: 201410311643166_AccountNumberChanges。

wzxhzdk:20

PM&amp;gt; Update-Database -Verbose
Using StartUp project 'AspNetMVCEssential'.
Using NuGet project 'AspNetMVCEssential'.
指定“-Verbose”标志以查看应用于目标数据库的 SQL 语句。
目标数据库为: “aspnet-AspNetMVCEssential-20141031091551”(DataSource: .，提供程序: System.Data.SqlClient，来源: Configuration)。
正在应用显式迁移: [201410311643166_AccountNumberChanges]。
正在应用显式迁移: 201410311643166_AccountNumberChanges。
...
正在运行 Seed 方法。

wzxhzdk:21

PM&amp;gt; Update-Databse -TargetMigration IntialCreate

wzxhzdk:22

internal sealed class Configuration : DbMigrationsConfiguration&lt;aspnetmvcessential.models.applicationdbcontext&gt;
{
    public Configuration()
    {
        //设置自动迁移
        AutomaticMigrationsEnabled = true;

        ContextKey = "AspNetMVCEssential.Models.ApplicationDbContext";
    }
    //...
}

wzxhzdk:23

PM&amp;gt; Update-Database -Verbose
Using StartUp project 'AspNetMVCEssential'.
Using NuGet project 'AspNetMVCEssential'.
指定“-Verbose”标志以查看应用于目标数据库的 SQL 语句。
目标数据库为: “aspnet-AspNetMVCEssential-20141031091551”(DataSource: .，提供程序: System.Data.SqlClient，来源: Configuration)。
没有挂起的显式迁移。
正在应用自动迁移: 201410311656382_AutomaticMigration。
System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException: 未应用自动迁移，因为自动迁移会导致数据丢失。如果要在可能导致数据丢失的情况下允许应用自动迁移，请在 DbMigrationsConfiguration 上将 AutomaticMigrationDataLossAllowed 设置为 "true"。也可以将 Update-Database 与 "-Force" 选项一起使用，或者构建基架执行显式迁移。
   在 System.Data.Entity.Migrations.DbMigrator.AutoMigrate(String migrationId, VersionedModel sourceModel, VersionedModel targetModel, Boolean downgrading)
。。。
   在 System.Data.Entity.Migrations.MigrationsDomainCommand.Execute(Action command)
未应用自动迁移，因为自动迁移会导致数据丢失。如果要在可能导致数据丢失的情况下允许应用自动迁移，请在 DbMigrationsConfiguration 上将 AutomaticMigrationDataLossAllowed 设置为 "true"。也可以将 Update-Database 与 "-Force" 选项一起使用，或者构建基架执行显式迁移。

wzxhzdk:24

PM&amp;gt; Update-Database -Verbose -Force
```&lt;/aspnetmvcessential.models.applicationdbcontext&gt;&lt;/mvcmovie.models.movie&gt;&lt;/actionresult&gt;&lt;/checkoutaccount&gt;&lt;/applicationuser&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</summary><category term="DotNet"></category><category term="Web"></category><category term="ASP.NET MVC"></category></entry><entry><title>ASP.NET MVC5 学习笔记-4 OWIN和Katana</title><link href="/aspnet-mvc5-xue-xi-bi-ji-4-owinhe-katana.html" rel="alternate"></link><published>2014-10-31T20:48:00+08:00</published><author><name>刘理想</name></author><id>tag:,2014-10-31:aspnet-mvc5-xue-xi-bi-ji-4-owinhe-katana.html</id><summary type="html">
&lt;h1 id="aspnet-mvc5-4-owinkatana"&gt;ASP.NET MVC5 学习笔记-4 OWIN和Katana&lt;/h1&gt;
&lt;h2 id="1-owin"&gt;1. Owin&lt;/h2&gt;
&lt;p&gt;OWIN全名：Open Web Interface for .NET. 它是一个说明，而非一个框架，该声明用来实现Web服务器和框架的松耦合。它提供了模块化、轻量级和便携的设计。类似Node.js, WSGI.&lt;/p&gt;
&lt;p&gt;Katana是微软实现的OWIN组件的集合。包含基础设施组件和功能性组件。并且暴露出了OWIN管道用来添加组件。可以在IIS、OwinHost.exe或者自定义的服务器中托管。&lt;/p&gt;
&lt;p&gt;比如OWIN提供了新的登录模式，比如，打开Web.config文件，我们看到：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;system.web&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;authentication&lt;/span&gt; &lt;span class="na"&gt;mode=&lt;/span&gt;&lt;span class="s"&gt;"None"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;compilation&lt;/span&gt; &lt;span class="na"&gt;debug=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="na"&gt;targetFramework=&lt;/span&gt;&lt;span class="s"&gt;"4.5"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;httpRuntime&lt;/span&gt; &lt;span class="na"&gt;targetFramework=&lt;/span&gt;&lt;span class="s"&gt;"4.5"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/system.web&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们看到&lt;code&gt;&amp;lt;authentication mode="None"/&amp;gt;&lt;/code&gt;，这里我们不在使用传统的Form认证，而是使用Owin的认证。我们打开Startup.cs文件，看到如下内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public partial class Startup
{
    public void Configuration(IAppBuilder app)
    {
        ConfigureAuth(app);
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里我们使用&lt;code&gt;ConfigureAuth(app)&lt;/code&gt;来配置认证，打开这个方法的定义，可以看到如下方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;public&lt;/span&gt; &lt;span class="nt"&gt;void&lt;/span&gt; &lt;span class="nt"&gt;ConfigureAuth&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;IAppBuilder&lt;/span&gt; &lt;span class="nt"&gt;app&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="err"&gt;使应用程序可以使用&lt;/span&gt; &lt;span class="n"&gt;Cookie&lt;/span&gt; &lt;span class="err"&gt;来存储已登录用户的信息&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UseCookieAuthentication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;CookieAuthenticationOptions&lt;/span&gt;
    &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;AuthenticationType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DefaultAuthenticationTypes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ApplicationCookie&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;LoginPath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;PathString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/Account/Login"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;Use&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="nt"&gt;cookie&lt;/span&gt; &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="nt"&gt;temporarily&lt;/span&gt; &lt;span class="nt"&gt;store&lt;/span&gt; &lt;span class="nt"&gt;information&lt;/span&gt; &lt;span class="nt"&gt;about&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="nt"&gt;user&lt;/span&gt; &lt;span class="nt"&gt;logging&lt;/span&gt; &lt;span class="nt"&gt;in&lt;/span&gt; &lt;span class="nt"&gt;with&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="nt"&gt;third&lt;/span&gt; &lt;span class="nt"&gt;party&lt;/span&gt; &lt;span class="nt"&gt;login&lt;/span&gt; &lt;span class="nt"&gt;provider&lt;/span&gt;
    &lt;span class="nt"&gt;app&lt;/span&gt;&lt;span class="nc"&gt;.UseExternalSignInCookie&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;DefaultAuthenticationTypes&lt;/span&gt;&lt;span class="nc"&gt;.ExternalCookie&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;取消注释以下行可允许使用第三方登录提供程序登录&lt;/span&gt;
    &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nt"&gt;app&lt;/span&gt;&lt;span class="nc"&gt;.UseMicrosoftAccountAuthentication&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;//&lt;/span&gt;    &lt;span class="nt"&gt;clientId&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;//&lt;/span&gt;    &lt;span class="nt"&gt;clientSecret&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nt"&gt;app&lt;/span&gt;&lt;span class="nc"&gt;.UseTwitterAuthentication&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;//&lt;/span&gt;   &lt;span class="nt"&gt;consumerKey&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;//&lt;/span&gt;   &lt;span class="nt"&gt;consumerSecret&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nt"&gt;app&lt;/span&gt;&lt;span class="nc"&gt;.UseFacebookAuthentication&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;//&lt;/span&gt;   &lt;span class="nt"&gt;appId&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;//&lt;/span&gt;   &lt;span class="nt"&gt;appSecret&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nt"&gt;app&lt;/span&gt;&lt;span class="nc"&gt;.UseGoogleAuthentication&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h2 id="2-local-authentication"&gt;2. 本地认证Local Authentication&lt;/h2&gt;
&lt;p&gt;默认就是本地认证：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// 使应用程序可以使用 Cookie 来存储已登录用户的信息
app.UseCookieAuthentication(new CookieAuthenticationOptions
{
    AuthenticationType = DefaultAuthenticationTypes.ApplicationCookie,
    LoginPath = new PathString("/Account/Login")
});
// Use a cookie to temporarily store information about a user logging in with a third party login provider
app.UseExternalSignInCookie(DefaultAuthenticationTypes.ExternalCookie);
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="3-facebook"&gt;3. 添加Facebook认证&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;取消注释以下行可允许使用第三方登录提供程序登录&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nt"&gt;app&lt;/span&gt;&lt;span class="nc"&gt;.UseMicrosoftAccountAuthentication&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt;    &lt;span class="nt"&gt;clientId&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt;    &lt;span class="nt"&gt;clientSecret&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nt"&gt;app&lt;/span&gt;&lt;span class="nc"&gt;.UseTwitterAuthentication&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt;   &lt;span class="nt"&gt;consumerKey&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt;   &lt;span class="nt"&gt;consumerSecret&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nt"&gt;app&lt;/span&gt;&lt;span class="nc"&gt;.UseFacebookAuthentication&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt;   &lt;span class="nt"&gt;appId&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt;   &lt;span class="nt"&gt;appSecret&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nt"&gt;app&lt;/span&gt;&lt;span class="nc"&gt;.UseGoogleAuthentication&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;取消注释对应的行，并且添加appId和appSecret。&lt;/p&gt;
&lt;p&gt;第二步，如果在创建账户后需要做一些其他的操作，修改AccountController.cs中的&lt;code&gt;ExternalLoginConfirmation&lt;/code&gt;方法。&lt;/p&gt;
&lt;h2 id="4-identity"&gt;4. Identity身份&lt;/h2&gt;
&lt;h3 id="41-claim"&gt;4.1 使用Claim添加自定义的字段&lt;/h3&gt;
&lt;p&gt;Identity 是第一个产生出来为每个用户识别身份的。&lt;code&gt;Account&lt;/code&gt;的&lt;code&gt;Register&lt;/code&gt;方法先生成创建一个&lt;code&gt;IdentityResult&lt;/code&gt;，然后再使用&lt;code&gt;SignInAsync&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;Claim是一个关于用户的声明，由Identity provider提供，比如用户1有Admin角色。&lt;/p&gt;
&lt;p&gt;Asp.Net生成的数据库中有&lt;code&gt;AspNetUsers&lt;/code&gt;，&lt;code&gt;AspNetUserRoles&lt;/code&gt;和&lt;code&gt;AspNetUserClaims&lt;/code&gt;表，其中&lt;code&gt;AspNetUserClaims&lt;/code&gt;用来存储用户自定义的一些信息。
比如给用户在注册时添加一个名称：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;public&lt;/span&gt; &lt;span class="nt"&gt;async&lt;/span&gt; &lt;span class="nt"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ActionResult&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;Register&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;RegisterViewModel&lt;/span&gt; &lt;span class="nt"&gt;model&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ModelState&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsValid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ApplicationUser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt; &lt;span class="n"&gt;UserName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Email&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;await&lt;/span&gt; &lt;span class="nt"&gt;UserManager&lt;/span&gt;&lt;span class="nc"&gt;.CreateAsync&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;user&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;model&lt;/span&gt;&lt;span class="nc"&gt;.Password&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="nt"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;result&lt;/span&gt;&lt;span class="nc"&gt;.Succeeded&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="err"&gt;添加&lt;/span&gt;&lt;span class="n"&gt;Claims&lt;/span&gt;
            &lt;span class="n"&gt;UserManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddClaim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Claim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ClaimTypes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GivenName&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FirstName&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
            &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;service&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;CheckingAccountService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpContext&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetOwinContext&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ApplicationDbContext&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
            &lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateCheckingAccount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FirstName&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LastName&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;SignInAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;isPersistent&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="n"&gt;RedirectToAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Index"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Home"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nt"&gt;else&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;AddErrors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;

    &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;如果我们进行到这一步时某个地方出错&lt;/span&gt;&lt;span class="err"&gt;，&lt;/span&gt;&lt;span class="nt"&gt;则重新显示表单&lt;/span&gt;
    &lt;span class="nt"&gt;return&lt;/span&gt; &lt;span class="nt"&gt;View&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;model&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;获取Claims&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var identity = (ClaimsIdentity) User.Identity;
var name = identity.FindFirstValue(ClaimTypes.GivenName) ?? identity.GetUserName();
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="42-model"&gt;4.2 在model中添加自定义的字段&lt;/h3&gt;
&lt;p&gt;打开&lt;code&gt;IdentityModels.cs&lt;/code&gt;，在&lt;code&gt;ApplicationUser&lt;/code&gt;中添加:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class ApplicationUser : IdentityUser
{
    public async Task&amp;lt;ClaimsIdentity&amp;gt; GenerateUserIdentityAsync(UserManager&amp;lt;ApplicationUser&amp;gt; manager)
    {
        var userIdentity = await manager.CreateIdentityAsync(this, DefaultAuthenticationTypes.ApplicationCookie);
        return userIdentity;
    }
    public string Pin { get; set; }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="5"&gt;5 基于角色的认证&lt;/h2&gt;
&lt;h3 id="51"&gt;5.1 为每个用户添加余额显示&lt;/h3&gt;
&lt;p&gt;每个Controller都有一个User属性，获取当前UserId的方法如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var userId = User.Identity.GetUserId();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;比如，我们要获取之前定义的账户余额，可以打开&lt;code&gt;CheckingAccountController.cs&lt;/code&gt;中添加下面的代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;private ApplicationDbContext db = new ApplicationDbContext();

//
// GET: /CheckingAccount/Details/
public ActionResult Details()
{
    var userId = User.Identity.GetUserId();
    var checkingAccount = db.CheckoutAccounts.First(c =&amp;gt; c.ApplicationUserId == userId);
    return View(checkingAccount);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样每个用户就都能看到自己的账户余额了。&lt;/p&gt;
&lt;h3 id="52"&gt;5.2 显示用户账户余额列表&lt;/h3&gt;
&lt;p&gt;在&lt;code&gt;CheckingAccountController.cs&lt;/code&gt;中添加：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public ActionResult List()
{
    return View(db.CheckoutAccounts.ToList());
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在，我们为List添加视图，右键：
&lt;img alt="Alt text" src="images/1416841607073.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;，如果按照上图配置发生错误，并且错误是“运行所选代码生成器时出错”，那么应该将数据上下文类留空，这样就可以了。&lt;/p&gt;
&lt;p&gt;然后编辑生成的模板，将编辑改为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@Html.ActionLink("详细", "DetailsForAdmin", new { id=item.Id }) |
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;并且，在&lt;code&gt;CheckingAccountController.cs&lt;/code&gt;中添加：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[Authorize(Roles = "Admin")]&lt;/span&gt;
&lt;span class="err"&gt;public&lt;/span&gt; &lt;span class="err"&gt;ActionResult&lt;/span&gt; &lt;span class="err"&gt;DetailsForAdmin(int&lt;/span&gt; &lt;span class="err"&gt;id)&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;var checkingAccount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;db.CheckoutAccounts.First(c =&amp;gt; c.Id == id);&lt;/span&gt;
&lt;span class="s"&gt;    return View("Details", checkingAccount);&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;请注意，我们添加了&lt;code&gt;[Authorize(Roles="Admin")]&lt;/code&gt;来限定只有Admin组的才能访问，下一节我们讲介绍如何使用角色分配。&lt;/p&gt;
&lt;h2 id="6"&gt;6 给用户赋值角色&lt;/h2&gt;
&lt;p&gt;打开&lt;code&gt;Migrations\Configurations&lt;/code&gt;，在&lt;code&gt;Seed&lt;/code&gt;方法中添加如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;protected override void Seed(AspNetMVCEssential.Models.ApplicationDbContext context)
{
    //UserStore一定要使用context作为参数
    var userStore = new UserStore&amp;lt;ApplicationUser&amp;gt;(context);
    var userManager = new UserManager&amp;lt;ApplicationUser&amp;gt;(userStore);

    if (!context.Users.Any(u =&amp;gt; u.UserName == "liulixiang1988"))
    {
        //1、创建用户
        var user = new ApplicationUser { UserName = "liulixiang1988", Email = "liulixiang1988@gmail.com" };
        //下面这句会创建一个用户并且会立即执行，不需调用SaveChanges
        userManager.Create(user, "passW0rd");

        //2、创建用户相关的账户
        var service = new CheckingAccountService(context);
        service.CreateCheckingAccount("liulixiang1988", "管理员", user.Id, 1000);

        //3、添加角色并保存
        context.Roles.AddOrUpdate(r =&amp;gt; r.Name, new IdentityRole { Name = "Admin" });
        context.SaveChanges();

        //4、给用户添加角色，指定Id和角色名
        userManager.AddToRole(user.Id, "Admin");

    }
}
&lt;/pre&gt;&lt;/div&gt;</summary><category term="DotNet"></category><category term="Web"></category><category term="ASP.NET MVC"></category></entry><entry><title>ASP.NET MVC5 学习笔记-1 控制器、路由、返回类型、选择器、过滤器</title><link href="/aspnet-mvc5-xue-xi-bi-ji-1-kong-zhi-qi-lu-you-fan-hui-lei-xing-xuan-ze-qi-guo-lu-qi.html" rel="alternate"></link><published>2014-10-31T09:28:00+08:00</published><author><name>刘理想</name></author><id>tag:,2014-10-31:aspnet-mvc5-xue-xi-bi-ji-1-kong-zhi-qi-lu-you-fan-hui-lei-xing-xuan-ze-qi-guo-lu-qi.html</id><summary type="html">
&lt;h1 id="aspnet-mvc5-1"&gt;ASP.NET MVC5 学习笔记-1 控制器、路由、返回类型、选择器、过滤器&lt;/h1&gt;
&lt;h2 id="1-action"&gt;1. Action&lt;/h2&gt;
&lt;h3 id="11"&gt;1.1 新建项目&lt;/h3&gt;
&lt;p&gt;新建项目-&amp;gt;Web-&amp;gt;Asp.net Web应用程序，选择MVC，选择添加测试。&lt;/p&gt;
&lt;p&gt;在解决方案上右键，选择"管理NuGet程序包"，在更新页更新全部程序包。&lt;/p&gt;
&lt;h3 id="12"&gt;1.2 控制器&lt;/h3&gt;
&lt;p&gt;控制器在Controllers文件夹内，命名规则是"名称+Controller"&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="2"&gt;2. 路由&lt;/h2&gt;
&lt;h3 id="21"&gt;2.1 路由规则&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{controller}/{action}/{id}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中{id}是可选的。&lt;/p&gt;
&lt;h3 id="22-routeconfigcs"&gt;2.2 路由定义RouteConfig.cs&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class RouteConfig
{
    public static void RegisterRoutes(RouteCollection routes)
    {
        routes.IgnoreRoute("{resource}.axd/{*pathInfo}");

        routes.MapRoute(
            name: "Default",
            url: "{controller}/{action}/{id}",
            defaults: new { controller = "Home", action = "Index", id = UrlParameter.Optional }
        );
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们自定义一个路由：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public static void RegisterRoutes(RouteCollection routes)
{
    routes.IgnoreRoute("{resource}.axd/{*pathInfo}");

    routes.MapRoute(
        name: "Serial Number",
        url: "serial/{lettercase}",
        defaults: new { controller = "Home", action = "Serial", lettercase="upper" }
    );

    routes.MapRoute(
        name: "Default",
        url: "{controller}/{action}/{id}",
        defaults: new { controller = "Home", action = "Index", id = UrlParameter.Optional }
    );
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;它定义了一个路由，路由名称为"Serial Number", url以"serial"开头，含有一个lettercase参数，使用HomeController.Serial来处理，lettercase默认值为"upper".&lt;/p&gt;
&lt;p&gt;现在在HomeController.cs中定义：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public ActionResult Serial(string lettercase)
{
    var serial = "ASP.NET mvc5";
    if (lettercase == "lower")
    {
        serial = serial.ToLower();
    }
    return Content(serial);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此时访问：http://localhost:17681/serial/ 或者 http://localhost:17681/serial/lower 都可以。&lt;/p&gt;
&lt;p&gt;如果路由中没有包含{lettercase}，则可以使用querystring方式传递lettercase: http://localhost:17681/serial/?lettercase=lower:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;routes.MapRoute(
    name: "Serial Number",
    url: "serial",
    defaults: new { controller = "Home", action = "Serial" }
);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;vs快捷键：F5运行调试； ctrl+F5：运行但不调试，此时运行时可以修改代码；ctrl+shift+b：编译代码，可以在运行时重新加载而无需重启。&lt;/p&gt;
&lt;h2 id="3"&gt;3 返回类型&lt;/h2&gt;
&lt;p&gt;内建Action Result类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ViewResult：渲染返回完整的网页&lt;/li&gt;
&lt;li&gt;PartialViewResult:渲染返回网页的一部分，用于Ajax比较多；&lt;/li&gt;
&lt;li&gt;ContentResult: 返回用户自定义的内容（text,xml)等；&lt;/li&gt;
&lt;li&gt;JsonResult: 返回Json类型&lt;/li&gt;
&lt;li&gt;RedirectToRouteResult:重定向&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="31-partialviewresult"&gt;3.1 PartialViewResult的例子&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public ActionResult Index()
{
    return PartialView();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="32-jsonresult"&gt;3.2 JsonResult的例子&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public ActionResult Serial(string lettercase)
{
    var serial = "ASP.NET mvc5";
    if (lettercase == "lower")
    {
        serial = serial.ToLower();
    }
    //return Content(serial);
    return Json(new {name = "serial", value = serial}, JsonRequestBehavior.AllowGet);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="33-redirecttorouteresult"&gt;3.3 RedirectToRouteResult的例子&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public ActionResult Serial(string lettercase)
{
    var serial = "ASP.NET mvc5";
    if (lettercase == "lower")
    {
        serial = serial.ToLower();
    }
    return RedirectToAction("Index");
}
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h2 id="4-action-selector"&gt;4 Action Selector&lt;/h2&gt;
&lt;h3 id="41-httppost"&gt;4.1 HttpPost&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public ActionResult Contact()
{
    ViewBag.TheMessage = "有问题的话请留言哦~";

    return View();
}

[HttpPost]
public ActionResult Contact(string message)
{
    ViewBag.TheMessage = "感谢你的留言~";

    return View();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对应的视图&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"POST"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"message"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="411-csrfvalidateantiforgerytoken"&gt;4.1.1 防止CSRF，使用&lt;code&gt;ValidateAntiForgeryToken&lt;/code&gt;：&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[HttpPost]&lt;/span&gt;
&lt;span class="k"&gt;[ValidateAntiForgeryToken]&lt;/span&gt;
&lt;span class="na"&gt;public ActionResult Create([Bind(Include&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"ID,Title,ReleaseDate,Genre,Price")] Movie movie)&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;if&lt;/span&gt; &lt;span class="err"&gt;(ModelState.IsValid)&lt;/span&gt;
    &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;db.Movies.Add(movie)&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;db.SaveChanges()&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;return&lt;/span&gt; &lt;span class="err"&gt;RedirectToAction("Index")&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;

    &lt;span class="err"&gt;return&lt;/span&gt; &lt;span class="err"&gt;View(movie)&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对应的视图使用&lt;code&gt;@Html.AntiForgeryToken&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()

    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-horizontal"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h4&amp;gt;&lt;/span&gt;Movie&lt;span class="nt"&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;hr&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-group"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            @Html.LabelFor(model =&amp;gt; model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"col-md-10"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                @Html.EditorFor(model =&amp;gt; model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model =&amp;gt; model.Title, "", new { @class = "text-danger" })
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="412-post-modelstateisvalid"&gt;4.1.2 验证Post请求 &lt;code&gt;ModelState.IsValid&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;使用&lt;code&gt;ModelState.IsValid&lt;/code&gt;来验证发送来的模型是否正常。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[HttpPost]&lt;/span&gt;
&lt;span class="k"&gt;[ValidateAntiForgeryToken]&lt;/span&gt;
&lt;span class="na"&gt;public ActionResult Edit([Bind(Include&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"ID,Title,ReleaseDate,Genre,Price")] Movie movie)&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;if&lt;/span&gt; &lt;span class="err"&gt;(ModelState.IsValid)&lt;/span&gt;
    &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;db.Entry(movie).State&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;EntityState.Modified;&lt;/span&gt;
&lt;span class="s"&gt;        db.SaveChanges();&lt;/span&gt;
&lt;span class="s"&gt;        return RedirectToAction("Index");&lt;/span&gt;
&lt;span class="s"&gt;    }&lt;/span&gt;
&lt;span class="s"&gt;    return View(movie);&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h3 id="42-actionname"&gt;4.2 ActionName&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[ActionName("about-the-site")]&lt;/span&gt;
&lt;span class="err"&gt;public&lt;/span&gt; &lt;span class="err"&gt;ActionResult&lt;/span&gt; &lt;span class="err"&gt;About()&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;ViewBag.Message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Your application description page.";&lt;/span&gt;

    &lt;span class="err"&gt;return&lt;/span&gt; &lt;span class="err"&gt;View("About")&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此时访问地址就是http://localhost:17681/Home/about-the-site&lt;/p&gt;
&lt;h3 id="43-route"&gt;4.3 Route&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[Route("home/create")]&lt;/span&gt;
&lt;span class="err"&gt;public&lt;/span&gt; &lt;span class="err"&gt;ActionResult&lt;/span&gt; &lt;span class="err"&gt;Create()&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;

&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h2 id="5"&gt;5. 过滤器&lt;/h2&gt;
&lt;p&gt;常见的过滤器&lt;/p&gt;
&lt;h3 id="51-authorize"&gt;5.1 Authorize属性&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[Authorize(Roles="administrator", Users="liulx")]&lt;/span&gt;
&lt;span class="k"&gt;[HttpPost]&lt;/span&gt;
&lt;span class="err"&gt;public&lt;/span&gt; &lt;span class="err"&gt;ActionResult&lt;/span&gt; &lt;span class="err"&gt;Create(Customer&lt;/span&gt; &lt;span class="err"&gt;customer)&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;db.Customers.Add(customer)&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;db.SaveChanges()&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;return&lt;/span&gt; &lt;span class="err"&gt;RedirectToAction("Index")&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Authorize&lt;/code&gt;可以不带参数，修饰class，如果class是&lt;code&gt;Authorize&lt;/code&gt;修饰的，那么可以用[AllowAnonymous]修饰对应的方法允许匿名访问。&lt;/p&gt;
&lt;h3 id="52-action-filter"&gt;5.2 Action filter&lt;/h3&gt;
&lt;p&gt;创建自定义的Action Filter：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;继承&lt;code&gt;ActionFilterAttribute&lt;/code&gt;类&lt;/li&gt;
&lt;li&gt;重写&lt;code&gt;OnActionExecuting&lt;/code&gt;方法，该方法在Action之前执行&lt;/li&gt;
&lt;li&gt;重写&lt;code&gt;OnActionExecuted&lt;/code&gt;方法，该方法在Action之后执行&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class MyLoggingFilterAttribute : ActionFilterAttribute
{
    public override void OnActionExecuted(ActionExecutedContext filterContext)
    {
        var request = filterContext.HttpContext.Request;
        // Logger.logRequest(request.UserHostAddress);
        base.OnActionExecuted(filterContext);
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;调用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[MyLoggingFilter]&lt;/span&gt;
&lt;span class="err"&gt;public&lt;/span&gt; &lt;span class="err"&gt;ActionResult&lt;/span&gt; &lt;span class="err"&gt;Index()&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;throw&lt;/span&gt; &lt;span class="err"&gt;new&lt;/span&gt; &lt;span class="err"&gt;StackOverflowException()&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;return&lt;/span&gt; &lt;span class="err"&gt;View()&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;要想在全局应用自定义的Filter，可以这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class FilterConfig
{
    public static void RegisterGlobalFilters(GlobalFilterCollection filters)
    {
        //添加自定义Filter
        filters.Add(new MyLoggingFilterAttribute());
        filters.Add(new HandleErrorAttribute());
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="53-result-filter"&gt;5.3 Result Filter&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[OutputCache(Duration=1800)]&lt;/span&gt;
&lt;span class="err"&gt;public&lt;/span&gt; &lt;span class="err"&gt;ActionResult&lt;/span&gt; &lt;span class="err"&gt;Index()&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;throw&lt;/span&gt; &lt;span class="err"&gt;new&lt;/span&gt; &lt;span class="err"&gt;StackOverflowException()&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;return&lt;/span&gt; &lt;span class="err"&gt;View()&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;[OutputCache(Duration=1800, VaryByParam="id")]&lt;/span&gt;
&lt;span class="err"&gt;public&lt;/span&gt; &lt;span class="err"&gt;ActionResult&lt;/span&gt; &lt;span class="err"&gt;Details(int&lt;/span&gt; &lt;span class="err"&gt;id)&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;Product p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;db.Products.Find(id);&lt;/span&gt;
&lt;span class="s"&gt;    return View(p);&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="54-exception-filter"&gt;5.4 Exception Filter&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[HandleError(View="MyError")]&lt;/span&gt;
&lt;span class="err"&gt;public&lt;/span&gt; &lt;span class="err"&gt;ActionResult&lt;/span&gt; &lt;span class="err"&gt;Index()&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;throw&lt;/span&gt; &lt;span class="err"&gt;new&lt;/span&gt; &lt;span class="err"&gt;StackOverflowException()&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;return&lt;/span&gt; &lt;span class="err"&gt;View()&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;[HandleError(View="MyError2", ExceptionType=typeof(DivideByZeroException))]&lt;/span&gt;
&lt;span class="err"&gt;public&lt;/span&gt; &lt;span class="err"&gt;ActionResult&lt;/span&gt; &lt;span class="err"&gt;Details(int&lt;/span&gt; &lt;span class="err"&gt;id)&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;Product p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;db.Products.Find(id);&lt;/span&gt;
&lt;span class="s"&gt;    return View(p);&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="DotNet"></category><category term="Web"></category><category term="ASP.NET MVC"></category></entry><entry><title>ASP.NET MVC5 学习笔记-2 Razor</title><link href="/aspnet-mvc5-xue-xi-bi-ji-2-razor.html" rel="alternate"></link><published>2014-10-31T09:28:00+08:00</published><author><name>刘理想</name></author><id>tag:,2014-10-31:aspnet-mvc5-xue-xi-bi-ji-2-razor.html</id><summary type="html">
&lt;h1 id="aspnet-mvc5-2-razor"&gt;ASP.NET MVC5 学习笔记-2 Razor&lt;/h1&gt;
&lt;h2 id="1-razor"&gt;1. Razor&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@*注释*@

你在用 @Request.Browser.Browser, 发送邮件给support@qq.com, 转义@@qq

@{
    var amounts = new List&lt;span class="nt"&gt;&amp;lt;Decimal&amp;gt;&lt;/span&gt; {100, 25.00m, 30.0m, -40}; 
}

&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    @foreach (decimal amount in amounts)
    {
        &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;@formatAmount(amount)&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;text&amp;gt;&lt;/span&gt;普通文本&lt;span class="nt"&gt;&amp;lt;/text&amp;gt;&lt;/span&gt;
        @:普通文本
    }
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;

@helper formatAmount(decimal amount)
{
    var color = "green";
    if (amount &lt;span class="nt"&gt;&amp;lt; 0&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;
    &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;color =&lt;/span&gt; &lt;span class="s"&gt;"red"&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color:@color"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;@String.Format("{0:c}", amount)&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="2-layout"&gt;2. Layout&lt;/h2&gt;
&lt;h3 id="21"&gt;2.1 模板继承&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Views&lt;/code&gt;文件夹下&lt;code&gt;_ViewStart.cshtml&lt;/code&gt;定义了全局的Layout：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果给某个控制器指定特定的layout，就是在这个控制器对应的文件夹下再建一个&lt;code&gt;_ViewStart.cshmtl&lt;/code&gt;，里面内容与上面相同。&lt;/p&gt;
&lt;p&gt;如果想给某个特定Action指定layout，可以这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@{
    ViewBag.Title = "Home Page";
    Layout = "MyLayout.cshtml";
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="22-layout"&gt;2.2 layout定义&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container body-content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    @RenderBody()
    &lt;span class="nt"&gt;&amp;lt;hr&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;footer&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;copy;&lt;/span&gt; @DateTime.Now.Year - 我的 ASP.NET 应用程序&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/bootstrap")
@RenderSection("scripts", required: false)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;RenderBody()就是默认全部。RenderSection()在子模板中可以省略，但定义如下：&lt;/p&gt;
&lt;p _="
" _wzxhzdk:17_="&amp;lt;script&amp;gt;" testing="testing" var="var"&gt;```@section scripts&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;##3. Html Helpers

###3.1 Html.ActionLink
&lt;/pre&gt;&lt;/div&gt;
&lt;p class='"css类，其他类不用加@"'&gt;@Html.ActionLink("连接名", "Action", "Controller", new {paramter=""}, new )
@Html.ActionLink("连接名", "Action", "Controller")&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;###3.2 Html.Partial

包含部分模板
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;@Html.Partial("_LoginPartial")&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;###3.3 Html.BeginForm

`Html.BeginForm("action", "form", Method, css)`
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;using (Html.BeginForm("LogOff", "Account", FormMethod.Post, new { id = "logoutForm", @class = "navbar-right" }))
{
//注意着一行，防止CSRF
@Html.AntiForgeryToken()&lt;/p&gt;
&lt;ul class="nav navbar-nav navbar-right"&gt;
&lt;li&gt;
        @Html.ActionLink("你好 " + User.Identity.GetUserName() + "!", "Manage", "Account", routeValues: null, htmlAttributes: new { title = "管理" })
    &lt;/li&gt;
&lt;li&gt;&lt;a href="javascript:document.getElementById('logoutForm').submit()"&gt;注销&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;如果使用了```@Html.AntiForgeryToken()```，则对应的Action应该添加`ValidateAntiForgeryToken`
&lt;/pre&gt;&lt;/div&gt;
&lt;p _="
" _home_='"Home");
' authenticationmanager.signout_="AuthenticationManager.SignOut();
" redirecttoaction_index_='RedirectToAction("Index",' return="return"&gt;[HttpPost]
[ValidateAntiForgeryToken]
public ActionResult LogOff()&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;###3.4 Html.Action

输出Action的结果作为页面的一部分
&lt;/pre&gt;&lt;/div&gt;
&lt;footer&gt;
&lt;p&gt;© @DateTime.Now.Year - 我的 ASP.NET 应用程序 @Html.Action("Serial", "Home", new{lettercase="lower"})&lt;/p&gt;
&lt;/footer&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;###3.5 下拉框
代码
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;public ActionResult Index(string movieGenre, string searchString)
{
    var GenreLst = new List&lt;string&gt;();&lt;/string&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var GenreQry = from d in db.Movies
               orderby d.Genre
               select d.Genre;

GenreLst.AddRange(GenreQry.Distinct());
ViewBag.movieGenre = new SelectList(GenreLst);
...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;对应的视图
&lt;/pre&gt;&lt;/div&gt;
&lt;p _all_='"All")
' _html.dropdownlist_moviegenre_='@Html.DropDownList("movieGenre",' _html.textbox_searchstring_='@Html.TextBox("SearchString")
' _wzxhzdk:20_="
&amp;lt;p&amp;gt;
" _wzxhzdk:21_wzxhzdk:22_="&amp;lt;input type=" genre:="Genre:" submit"="" title:="Title:" value="Filter"&gt;&lt;/p&gt;

"&amp;gt;@using (Html.BeginForm("Index", "Movies", FormMethod.Get))
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;使用`Html.DropDownList`和`Html.TextBox`等中绑定的名称和ViewBag中的值相同时可以自动绑定。


##4. Bundling和Minification
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;@Styles.Render("~/Content/css")
@Scripts.Render("~/bundles/modernizr")
@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/bootstrap")&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;public class BundleConfig
{
    // 有关绑定的详细信息，请访问 http://go.microsoft.com/fwlink/?LinkId=301862
    public static void RegisterBundles(BundleCollection bundles)
    {
        bundles.Add(new ScriptBundle("~/bundles/jquery").Include(
                    "~/Scripts/jquery-{version}.js"));&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    bundles.Add(new ScriptBundle("~/bundles/jqueryval").Include(
                "~/Scripts/jquery.validate*"));

    // 使用要用于开发和学习的 Modernizr 的开发版本。然后，当你做好
    // 生产准备时，请使用 http://modernizr.com 上的生成工具来仅选择所需的测试。
    bundles.Add(new ScriptBundle("~/bundles/modernizr").Include(
                "~/Scripts/modernizr-*"));

    bundles.Add(new ScriptBundle("~/bundles/bootstrap").Include(
              "~/Scripts/bootstrap.js",
              "~/Scripts/respond.js"));

    bundles.Add(new StyleBundle("~/Content/css").Include(
              "~/Content/bootstrap.css",
              "~/Content/site.css"));
    //压缩
    BundleTable.EnableOptimizations = true;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;}
```&lt;/p&gt;
&lt;h2 id="5-bootstrap"&gt;5. Bootstrap&lt;/h2&gt;
&lt;p&gt;ASP.NET MVC 5默认支持BootStrap&lt;/p&gt;</summary><category term="DotNet"></category><category term="Web"></category><category term="ASP.NET MVC"></category></entry><entry><title>[翻译]使用ASP.NET Web API 2、Owin和Identity来创建Token认证(1)</title><link href="/fan-yi-shi-yong-aspnet-web-api-2-owinhe-identitylai-chuang-jian-tokenren-zheng-1.html" rel="alternate"></link><published>2014-10-30T00:00:00+08:00</published><author><name>刘理想</name></author><id>tag:,2014-10-30:fan-yi-shi-yong-aspnet-web-api-2-owinhe-identitylai-chuang-jian-tokenren-zheng-1.html</id><summary type="html">&lt;h1 id="aspnet-web-api-2owinidentitytoken1"&gt;使用ASP.NET Web API 2、Owin和Identity来创建Token认证(1)&lt;/h1&gt;
&lt;h2 id="0"&gt;0. 简介&lt;/h2&gt;
&lt;h3 id="01-token"&gt;0.1 Token认证&lt;/h3&gt;
&lt;h3 id="02-web-api"&gt;0.2 Web API&lt;/h3&gt;
&lt;hr /&gt;
&lt;h2 id="1-api"&gt;1. 创建后端API&lt;/h2&gt;
&lt;h3 id="11-web-api"&gt;1.1 第一步 创建Web API项目&lt;/h3&gt;
&lt;p&gt;使用VS2013，创建"ASP.NET Web应用程序"，解决方案名为AngularJSAuthentication，项目名为AngularJSAuthentication.API:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Alt text" src="images/dot-net-owin-1.png" /&gt;&lt;/p&gt;
&lt;h3 id="12-nuget"&gt;1.2 第二步 安装必要的NuGet包&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Install-Package Microsoft.AspNet.WebApi.Owin -Version 5.1.2
Install-Package Microsoft.Owin.Host.SystemWeb -Version 2.1.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中，&lt;code&gt;Microsoft.Owin.Host.SystemWeb&lt;/code&gt;包是用来Owin服务器的API能够在IIS上运行&lt;/p&gt;
&lt;h3 id="13-owinstartup"&gt;1.3 第三步 添加Owin"启动(Startup)"类&lt;/h3&gt;
&lt;p&gt;右键，添加新类&lt;code&gt;Startup&lt;/code&gt;，我们会修改好几次这个类，现在它应该是这个样子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;using System.Web.Http;
using AngularJSAuthentication.API;
using Microsoft.Owin;
using Owin;

[assembly: OwinStartup(typeof (Startup))]

namespace AngularJSAuthentication.API
{
    public class Startup
    {
        public void Configuration(IAppBuilder app)
        {
            var config = new HttpConfiguration();
            WebApiConfig.Register(config);
            app.UseWebApi(config);
        }
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;assembly&lt;/code&gt;属性声明了启动时启动的类，也就是说&lt;code&gt;Startup&lt;/code&gt;类在应用启动的时候会被调用。&lt;code&gt;Configuration&lt;/code&gt;方法接收的参数&lt;code&gt;IAppBuilder&lt;/code&gt;实例app是主机传过来的。&lt;code&gt;app&lt;/code&gt;是一个接口，用来组成我们服务器的应用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;HttpConfiguration&lt;/code&gt;对象用来配置路由，因此，我们把它传递给&lt;code&gt;WebApiConfig&lt;/code&gt;类的&lt;code&gt;Register&lt;/code&gt;方法。&lt;/p&gt;
&lt;p&gt;最后，我们把&lt;code&gt;config&lt;/code&gt;对象传递给&lt;code&gt;UserWebApi&lt;/code&gt;扩展方法，实现ASP.NET Web API和Owin Server的管道。&lt;/p&gt;
&lt;p&gt;通常，&lt;code&gt;WebApiConfig&lt;/code&gt;由模板自动生成。如果没有，就在&lt;code&gt;App_Start&lt;/code&gt;文件夹下创建：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public static class WebApiConfig
{
    public static void Register(HttpConfiguration config)
    {

        // Web API routes
        config.MapHttpAttributeRoutes();

        config.Routes.MapHttpRoute(
            name: &amp;quot;DefaultApi&amp;quot;,
            routeTemplate: &amp;quot;api/{controller}/{id}&amp;quot;,
            defaults: new { id = RouteParameter.Optional }
        );

        var jsonFormatter = config.Formatters.OfType&amp;lt;JsonMediaTypeFormatter&amp;gt;().First();
        jsonFormatter.SerializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver();
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="14-globalasax"&gt;1.4 第四步 删除Global.asax类&lt;/h3&gt;
&lt;p&gt;不再需要这个类，也不需要&lt;code&gt;Application_Start&lt;/code&gt;事件，因为我们已经配置了&lt;code&gt;Startup&lt;/code&gt;类，所以放心删除它吧。&lt;/p&gt;
&lt;h3 id="15-windows-identity-systemwindows"&gt;1.5 第五步 添加Windows Identity System(Windows身份认证系统)&lt;/h3&gt;
&lt;p&gt;配置过Web API后，现在可以添加支持注册和验证用户的包了，安装如下包&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Install-Package Microsoft.AspNet.Identity.Owin -Version 2.0.1
Install-Package Microsoft.AspNet.Identity.EntityFramework -Version 2.0.1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第一个包用来支持ASP.NET Identity Owin，第二个包可以让ASP.NET Identity使用Entity Framework,这样我们就能保存用户到SQL Server数据库了。&lt;/p&gt;
&lt;p&gt;现在我们需要添加一个Database context类，用来负责与数据库交互。因此，添加&lt;code&gt;AuthContext&lt;/code&gt;类：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class AuthContext: IdentityDbContext&amp;lt;IdentityUser&amp;gt;
{
    public AuthContext(): base(&amp;quot;AuthContext&amp;quot;)
    {

    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;能看到这个类继承自&lt;code&gt;IdentityDbContext&lt;/code&gt;类。可以把这个特殊类型的&lt;code&gt;DbContext&lt;/code&gt;类。它支持所有Entity Framework的code-first映射，以及DbSet属性用来管理数据库的身份表。可以读&lt;a href="http://odetocode.com/blogs/scott/archive/2014/01/03/asp-net-identity-with-the-entity-framework.aspx"&gt;Scott Allen的博客&lt;/a&gt;了解更多。&lt;/p&gt;
&lt;p&gt;现在，我们在&lt;code&gt;Models&lt;/code&gt;文件夹下添加一个&lt;code&gt;UserModel&lt;/code&gt;类，它包含一些用来验证注册请求。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;using System.ComponentModel.DataAnnotations;

namespace AngularJSAuthentication.API.Models
{
    public class UserModel
    {
        [Required]
        [Display(Name = &amp;quot;用户名&amp;quot;)]
        public string UserName { get; set; }

        [Required]
        [StringLength(100, ErrorMessage = &amp;quot;{0}至少要有{2}个字符&amp;quot;, MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = &amp;quot;密码&amp;quot;)]
        public string Password { get; set; }

        [DataType(DataType.Password)]
        [Display(Name = &amp;quot;确认密码&amp;quot;)]
        [Compare(&amp;quot;Password&amp;quot;, ErrorMessage = &amp;quot;两次密码输入不一致&amp;quot;)]
        public string ConfirmedPassword { get; set; }
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最后，我们在web.config中添加连接字符串：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;connectionStrings&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;add&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;AuthContext&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;connectionString=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Data Source=.;Initial Catalog=AngularJSAuth;Integrated Security=SSPI;&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;providerName=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;System.Data.SqlClient&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/connectionStrings&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="16-aspnet-identity-system"&gt;1.6 第六步 添加仓库类来支持ASP.NET Identity System&lt;/h3&gt;
&lt;p&gt;现在，我们要实现两个方法&lt;code&gt;RegisterUser&lt;/code&gt;和&lt;code&gt;FindUser&lt;/code&gt;，因此，我们添加一个名为&lt;code&gt;AuthRepository&lt;/code&gt;的类：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class AuthRepository : IDisposable
{
    private readonly AuthContext _ctx;

    private readonly UserManager&amp;lt;IdentityUser&amp;gt; _userManager;

    public AuthRepository()
    {
        _ctx = new AuthContext();
        _userManager = new UserManager&amp;lt;IdentityUser&amp;gt;(new UserStore&amp;lt;IdentityUser&amp;gt;(_ctx));
    }

    public void Dispose()
    {
        _ctx.Dispose();
        _userManager.Dispose();
    }

    public async Task&amp;lt;IdentityResult&amp;gt; RegisterUser(UserModel userModel)
    {
        var user = new IdentityUser
        {
            UserName = userModel.UserName
        };

        IdentityResult result = await _userManager.CreateAsync(user, userModel.Password);

        return result;
    }

    public async Task&amp;lt;IdentityUser&amp;gt; FindUser(string username, string password)
    {
        IdentityUser user = await _userManager.FindAsync(username, password);
        return user;
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们依赖&lt;code&gt;UserManager&lt;/code&gt;来提供用户信息的逻辑操作。&lt;code&gt;UserManager&lt;/code&gt;指导什么时候hash密码，怎么以及何时验证用户，以及如何管理请求。读&lt;a href="http://odetocode.com/blogs/scott/archive/2014/01/20/implementing-asp-net-identity.aspx"&gt;ASP.NET Identity System&lt;/a&gt;来了解更多。&lt;/p&gt;
&lt;h3 id="17-account-controller"&gt;1.7 第七步 添加我们的“账户”控制器("Account" Controller)&lt;/h3&gt;
&lt;p&gt;现在是时候添加我们的第一个Web API控制器了，这个控制器用来注册新用户。在&lt;code&gt;Controllers&lt;/code&gt;文件夹下添加一个空Web API 2的控制器&lt;code&gt;AccountController&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[RoutePrefix(&amp;quot;api/account&amp;quot;)]&lt;/span&gt;
&lt;span class="err"&gt;public&lt;/span&gt; &lt;span class="err"&gt;class&lt;/span&gt; &lt;span class="err"&gt;AccountController&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="err"&gt;ApiController&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;private AuthRepository _repo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;null;&lt;/span&gt;

    &lt;span class="err"&gt;public&lt;/span&gt; &lt;span class="err"&gt;AccountController()&lt;/span&gt;
    &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;_repo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;new AuthRepository();&lt;/span&gt;
&lt;span class="s"&gt;    }&lt;/span&gt;

    &lt;span class="err"&gt;//POST&lt;/span&gt; &lt;span class="err"&gt;/api/Acount/Register&lt;/span&gt;
    &lt;span class="k"&gt;[AllowAnonymous]&lt;/span&gt;
    &lt;span class="k"&gt;[Route(&amp;quot;Register&amp;quot;)]&lt;/span&gt;
    &lt;span class="err"&gt;public&lt;/span&gt; &lt;span class="err"&gt;async&lt;/span&gt; &lt;span class="err"&gt;Task&amp;lt;IHttpActionResult&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;Register(UserModel&lt;/span&gt; &lt;span class="err"&gt;userModel)&lt;/span&gt;
    &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;if&lt;/span&gt; &lt;span class="err"&gt;(!ModelState.IsValid)&lt;/span&gt;
        &lt;span class="err"&gt;{&lt;/span&gt;
            &lt;span class="err"&gt;return&lt;/span&gt; &lt;span class="err"&gt;BadRequest(ModelState)&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;}&lt;/span&gt;

        &lt;span class="na"&gt;IdentityResult result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;await _repo.RegisterUser(userModel);&lt;/span&gt;
&lt;span class="s"&gt;        IHttpActionResult errorResult = GetErrorResult(result);&lt;/span&gt;
&lt;span class="s"&gt;        if (errorResult != null)&lt;/span&gt;
&lt;span class="s"&gt;        {&lt;/span&gt;
&lt;span class="s"&gt;            return errorResult;&lt;/span&gt;
&lt;span class="s"&gt;        }&lt;/span&gt;

        &lt;span class="err"&gt;return&lt;/span&gt; &lt;span class="err"&gt;Ok()&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;

    &lt;span class="err"&gt;protected&lt;/span&gt; &lt;span class="err"&gt;override&lt;/span&gt; &lt;span class="err"&gt;void&lt;/span&gt; &lt;span class="err"&gt;Dispose(bool&lt;/span&gt; &lt;span class="err"&gt;disposing)&lt;/span&gt;
    &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;if&lt;/span&gt; &lt;span class="err"&gt;(disposing)&lt;/span&gt;
        &lt;span class="err"&gt;{&lt;/span&gt;
            &lt;span class="err"&gt;_repo.Dispose()&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;}&lt;/span&gt;
        &lt;span class="err"&gt;base.Dispose(disposing)&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;

    &lt;span class="err"&gt;private&lt;/span&gt; &lt;span class="err"&gt;IHttpActionResult&lt;/span&gt; &lt;span class="err"&gt;GetErrorResult(IdentityResult&lt;/span&gt; &lt;span class="err"&gt;result)&lt;/span&gt;
    &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;if (result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;= null)&lt;/span&gt;
&lt;span class="s"&gt;        {&lt;/span&gt;
&lt;span class="s"&gt;            return InternalServerError();&lt;/span&gt;
&lt;span class="s"&gt;        }&lt;/span&gt;

        &lt;span class="err"&gt;if&lt;/span&gt; &lt;span class="err"&gt;(!result.Succeeded)&lt;/span&gt;
        &lt;span class="err"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;if (result.Errors !&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;null)&lt;/span&gt;
&lt;span class="s"&gt;            {&lt;/span&gt;
&lt;span class="s"&gt;                foreach (var error in result.Errors)&lt;/span&gt;
&lt;span class="s"&gt;                {&lt;/span&gt;
&lt;span class="s"&gt;                    ModelState.AddModelError(&amp;quot;&amp;quot;, error);&lt;/span&gt;
&lt;span class="s"&gt;                }&lt;/span&gt;
&lt;span class="s"&gt;            }&lt;/span&gt;

            &lt;span class="err"&gt;if&lt;/span&gt; &lt;span class="err"&gt;(ModelState.IsValid)&lt;/span&gt;
            &lt;span class="err"&gt;{&lt;/span&gt;
                &lt;span class="err"&gt;return&lt;/span&gt; &lt;span class="err"&gt;BadRequest()&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
            &lt;span class="err"&gt;}&lt;/span&gt;
            &lt;span class="err"&gt;return&lt;/span&gt; &lt;span class="err"&gt;BadRequest(ModelState)&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;}&lt;/span&gt;
        &lt;span class="err"&gt;return&lt;/span&gt; &lt;span class="err"&gt;null&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;任何人想要注册，必须使用HTTP POST请求'/api/account/register'，而且请求必须包含如下的JSON对象：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{
    &amp;quot;userName&amp;quot;: &amp;quot;liu&amp;quot;,
    &amp;quot;password&amp;quot;: &amp;quot;123456&amp;quot;,
    &amp;quot;confirmPassword&amp;quot;: &amp;quot;123456&amp;quot;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在可以使用HTTP POST请求网址：“http://localhost:port/api/account/register”，如果一切正常就会收到HTTP状态码200，而且数据库会自动在表&lt;code&gt;dbo.AspNetUsers&lt;/code&gt;中创建一个用户。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;通过HTTPS发送POST请求非常重要，因为敏感信息会被加密。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GetErrorResult&lt;/code&gt;方法是一个帮助方法用来验证&lt;code&gt;UserModel&lt;/code&gt;，并且返回相应的HTTP状态码。&lt;/p&gt;
&lt;h3 id="18-order-controller"&gt;1.8 第八步 添加具有安全保护的“订单”控制器(Order Controller)&lt;/h3&gt;
&lt;p&gt;现在我们想要添加控制器来处理我们的订单，我们设定这个控制器为认证用户返回订单，为了保持简单我们返回静态数据。因此在&lt;code&gt;Controllers&lt;/code&gt;下添加一个&lt;code&gt;OrdersController&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[RoutePrefix(&amp;quot;api/Orders&amp;quot;)]&lt;/span&gt;
&lt;span class="err"&gt;public&lt;/span&gt; &lt;span class="err"&gt;class&lt;/span&gt; &lt;span class="err"&gt;OrdersController&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="err"&gt;ApiController&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;GET&lt;/span&gt; &lt;span class="err"&gt;api/&amp;lt;controller&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;[Authorize]&lt;/span&gt;
    &lt;span class="k"&gt;[Route(&amp;quot;&amp;quot;)]&lt;/span&gt;
    &lt;span class="err"&gt;public&lt;/span&gt; &lt;span class="err"&gt;IHttpActionResult&lt;/span&gt; &lt;span class="err"&gt;Get()&lt;/span&gt;
    &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;return&lt;/span&gt; &lt;span class="err"&gt;Ok(Order.CreateOrders())&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;#region Helpers&lt;/span&gt;

    &lt;span class="err"&gt;public&lt;/span&gt; &lt;span class="err"&gt;class&lt;/span&gt; &lt;span class="err"&gt;Order&lt;/span&gt;
    &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;public&lt;/span&gt; &lt;span class="err"&gt;int&lt;/span&gt; &lt;span class="err"&gt;OrderID&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt; &lt;span class="err"&gt;get&lt;/span&gt;&lt;span class="c1"&gt;; set; }&lt;/span&gt;
        &lt;span class="err"&gt;public&lt;/span&gt; &lt;span class="err"&gt;string&lt;/span&gt; &lt;span class="err"&gt;CustomerName&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt; &lt;span class="err"&gt;get&lt;/span&gt;&lt;span class="c1"&gt;; set; }&lt;/span&gt;
        &lt;span class="err"&gt;public&lt;/span&gt; &lt;span class="err"&gt;string&lt;/span&gt; &lt;span class="err"&gt;ShipperCity&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt; &lt;span class="err"&gt;get&lt;/span&gt;&lt;span class="c1"&gt;; set; }&lt;/span&gt;
        &lt;span class="err"&gt;public&lt;/span&gt; &lt;span class="err"&gt;Boolean&lt;/span&gt; &lt;span class="err"&gt;IsShipped&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt; &lt;span class="err"&gt;get&lt;/span&gt;&lt;span class="c1"&gt;; set; }&lt;/span&gt;

        &lt;span class="err"&gt;public&lt;/span&gt; &lt;span class="err"&gt;static&lt;/span&gt; &lt;span class="err"&gt;List&amp;lt;Order&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;CreateOrders()&lt;/span&gt;
        &lt;span class="err"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;var OrderList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;new List&amp;lt;Order&amp;gt; &lt;/span&gt;
&lt;span class="s"&gt;            {&lt;/span&gt;
&lt;span class="s"&gt;                new Order {OrderID = 10248, CustomerName = &amp;quot;Taiseer Joudeh&amp;quot;, ShipperCity = &amp;quot;Amman&amp;quot;, IsShipped = true },&lt;/span&gt;
&lt;span class="s"&gt;                new Order {OrderID = 10249, CustomerName = &amp;quot;Ahmad Hasan&amp;quot;, ShipperCity = &amp;quot;Dubai&amp;quot;, IsShipped = false},&lt;/span&gt;
&lt;span class="s"&gt;                new Order {OrderID = 10250,CustomerName = &amp;quot;Tamer Yaser&amp;quot;, ShipperCity = &amp;quot;Jeddah&amp;quot;, IsShipped = false },&lt;/span&gt;
&lt;span class="s"&gt;                new Order {OrderID = 10251,CustomerName = &amp;quot;Lina Majed&amp;quot;, ShipperCity = &amp;quot;Abu Dhabi&amp;quot;, IsShipped = false},&lt;/span&gt;
&lt;span class="s"&gt;                new Order {OrderID = 10252,CustomerName = &amp;quot;Yasmeen Rami&amp;quot;, ShipperCity = &amp;quot;Kuwait&amp;quot;, IsShipped = true}&lt;/span&gt;
&lt;span class="s"&gt;            };&lt;/span&gt;

            &lt;span class="err"&gt;return&lt;/span&gt; &lt;span class="err"&gt;OrderList&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;#endregion&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意我们在&lt;code&gt;Get&lt;/code&gt;上加了一个&lt;code&gt;Authorize&lt;/code&gt;属性，此时，如果访问 “http://localhost:port/api/orders”就会收到401未授权状态码。因为我们的请求当中并没有包含授权头信息。&lt;/p&gt;
&lt;h3 id="19-oauth-token"&gt;1.9 第九步 添加支持OAuth Token生成功能&lt;/h3&gt;
&lt;p&gt;现在我们该让API增加OAuth功能&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Install-Package Microsoft.Owin.Security.OAuth -Version 2.1.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;打开&lt;code&gt;Startup&lt;/code&gt;类，添加&lt;code&gt;ConfigureOAuth&lt;/code&gt;方法，并在&lt;code&gt;Configuration&lt;/code&gt;方法的第一行调用它：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class Startup
    {
        public void Configuration(IAppBuilder app)
        {
            var config = new HttpConfiguration();
            WebApiConfig.Register(config);
            app.UseWebApi(config);
        }

        public void ConfigreOAuth(IAppBuilder app)
        {
            var oauthServerOptions = new OAuthAuthorizationServerOptions
            {
                AllowInsecureHttp = true,
                TokenEndpointPath = new PathString(&amp;quot;/token&amp;quot;),
                AccessTokenExpireTimeSpan = TimeSpan.FromDays(1),
                Provider = new SimpleAuthorizationServerProvider()
            };

            app.UseOAuthAuthorizationServer(oauthServerOptions);
            app.UseOAuthBearerAuthentication(new OAuthBearerAuthenticationOptions());
        }
    }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们创建了一个&lt;code&gt;OAuthAuthorizationServerOptions&lt;/code&gt;类的实例，并且设置了如下的一些选项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;产生令牌的路径&lt;code&gt;http://localhost:port/token&lt;/code&gt;。后面我们会看到如何使用HTTP POST请求产生令牌&lt;/li&gt;
&lt;li&gt;令牌24小时过期&lt;/li&gt;
&lt;li&gt;我们指明如何验证用户的凭据，来返回令牌，就是使用后面我们要定义的一个类&lt;code&gt;SimpleAuthorizationServerProvider&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后将选项实例传递给扩展方法&lt;code&gt;UseOAuthAuthorizationServer&lt;/code&gt;，这样我们就将认证中间件添加到了管道当中去了。&lt;/p&gt;
&lt;h3 id="110-simpleauthorizationserverprovider"&gt;1.10 第十步 实现"SimpleAuthorizationServerProvider"类&lt;/h3&gt;
&lt;p&gt;创建一个&lt;code&gt;Providers&lt;/code&gt;文件夹，然后添加一个&lt;code&gt;SimpleAuthorizationServerProvider&lt;/code&gt;类：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class SimpleAuthorizationServerProvider: OAuthAuthorizationServerProvider
{

    public override async Task ValidateClientAuthentication(OAuthValidateClientAuthenticationContext context)
    {
        context.Validated();
    }

    public override async Task GrantResourceOwnerCredentials(OAuthGrantResourceOwnerCredentialsContext context)
    {
        context.OwinContext.Response.Headers.Add(&amp;quot;Access-Control-Allow-Origin&amp;quot;, new []{&amp;quot;*&amp;quot;});

        using (var _repo = new AuthRepository())
        {
            IdentityUser user = await _repo.FindUser(context.UserName, context.Password);

            if (user == null)
            {
                context.SetError(&amp;quot;invalid_grant&amp;quot;, &amp;quot;用户名或者密码不正确&amp;quot;);
                return;
            }

            var identity = new ClaimsIdentity(context.Options.AuthenticationType);
            identity.AddClaim(new Claim(&amp;quot;sub&amp;quot;, context.UserName));
            identity.AddClaim(new Claim(&amp;quot;role&amp;quot;, &amp;quot;user&amp;quot;));

            context.Validated(identity);
        }
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;该类继承自&lt;code&gt;OAuthAuthorizationServerProvider&lt;/code&gt;，我们重写了两个方法，第一个是用来验证客户端的。本例中我们只有一个客户端，因此永远验证成功。&lt;/p&gt;
&lt;p&gt;第二个方法&lt;code&gt;GrantResourceOwnerCredentials&lt;/code&gt;负责验证发送给认证服务器令牌端的用户名和密码。&lt;/p&gt;
&lt;p&gt;如果认证成功，我们创建一个&lt;code&gt;ClaimsIdentity&lt;/code&gt;类，并且传递认证类型给它。然后添加两个请求(&lt;code&gt;sub&lt;/code&gt;和&lt;code&gt;role&lt;/code&gt;)，他们会被包含在签名令牌中。也可以添加别的,但是会增加令牌的大小。&lt;/p&gt;
&lt;p&gt;最后使用&lt;code&gt;context.Validate(identity)&lt;/code&gt;生成令牌。&lt;/p&gt;
&lt;p&gt;为了让令牌中间件提供者允许CORS，我们需要添加头"Access-Control-Allow-Origin"到Owin的上下文中。如果忘记这么做，从浏览器中调用生成令牌就会失败。&lt;/p&gt;
&lt;h3 id="111-aspnet-web-apicors"&gt;1.11 第十一步 允许ASP.NET Web API支持CORS&lt;/h3&gt;
&lt;p&gt;首先，需要安装对应的NuGet包：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Install-Package Microsoft.Owin.Cors
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后再次打开类&lt;code&gt;Startup&lt;/code&gt;，并添加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public void Configuration(IAppBuilder app)
{
    var config = new HttpConfiguration();
    ConfigreOAuth(app);

    WebApiConfig.Register(config);
    //添加这行
    app.UseCors(CorsOptions.AllowAll);
    app.UseWebApi(config);
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="112-api"&gt;1.12 第十二步 测试后端API&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Alt text" src="images/dot-net-owin-2.png" /&gt;&lt;/p&gt;
&lt;p&gt;注意，content-type和payload type都是"x-www-form-urlencoded"类型，因此payload body将是form(grant_type=password&amp;amp;username="liulx"&amp;amp;password="123456")。如果一切正常我们会在响应中收到一个签名令牌。&lt;/p&gt;
&lt;p&gt;"grant_type"指明授权类型，此处是密码。&lt;/p&gt;
&lt;p&gt;现在既然有了token，我们就可以访问安全数据/api/Orders了：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Alt text" src="images/dot-net-owin-3.png" /&gt;&lt;/p&gt;</summary></entry><entry><title>Nancy Web框架</title><link href="/nancy-webkuang-jia.html" rel="alternate"></link><published>2014-09-12T23:39:00+08:00</published><author><name>刘理想</name></author><id>tag:,2014-09-12:nancy-webkuang-jia.html</id><summary type="html">
&lt;h1 id="nancy"&gt;Nancy框架&lt;/h1&gt;
&lt;h2 id="nancy_1"&gt;一、创建第一个Nancy应用&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;安装&lt;a href="http://visualstudiogallery.msdn.microsoft.com/f1e29f61-4dff-4b1e-a14b-6bd0d307611a"&gt;Nancy项目模板&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;创建&lt;code&gt;Nancy Empty Web Application with ASP.NET Hosting&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;添加&lt;code&gt;Nancy module&lt;/code&gt;,它是一个标准C#类，通过添加下面几行代码定义了web应用的路由处理方法。&lt;/li&gt;
&lt;li&gt;编译并运行。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class HelloModule : NancyModule
{
    public HelloModule()
    {
        Get["/"] = parameters =&amp;gt; "Hello World";
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="nancymodule"&gt;二、探索Nancy的module&lt;/h2&gt;
&lt;p&gt;Module继承自&lt;code&gt;NancyModule&lt;/code&gt;类。Module是必不可少的.它不仅定义了路由，还提供了许多其他信息，比如请求、上下文、构造响应的辅助方法、视图渲染等等。&lt;/p&gt;
&lt;h3 id="1"&gt;1. 模块能够在全局被发现&lt;/h3&gt;
&lt;p&gt;可以在任意地方定义module，比如外部的dll等，这为代码的复用带来很大的方便。不用担心效率问题，扫描module只在程序启动时发生。&lt;/p&gt;
&lt;h3 id="2"&gt;2. 使用模块为路由创建一个根&lt;/h3&gt;
&lt;p&gt;类似命名空间的概念，在创建构造方法时传给base一个名称。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class ResourceModule : NancyModule
{
    public ResourceModule() : base("/products")
    {
        // would capture routes to /products/list sent as a GET request
        Get["/list"] = parameters =&amp;gt; {
            return "The list of products";
        };
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="_1"&gt;三、定义路由&lt;/h2&gt;
&lt;p&gt;路由是在module的构造方法中定义的。为了定义一个路由，你需要声明&lt;code&gt;方法&lt;/code&gt;+&lt;code&gt;模式&lt;/code&gt;+&lt;code&gt;动作&lt;/code&gt;+(可选)&lt;code&gt;条件&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;比如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class ProductsModule : NancyModule
{
    public ProductsModule()
    {
        Get["/products/{id}"] = _ =&amp;gt;
        {
            //do something
        };
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或者异步&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class ProductsModule : NancyModule
{
    public ProductsModule()
    {
        Get["/products/{id}", runAsync: true] = async (_, token) =&amp;gt;
        {
            //do something long and tedious
        };
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="1_1"&gt;1. 方法&lt;/h3&gt;
&lt;p&gt;支持HTTP常见方法：&lt;code&gt;DELETE&lt;/code&gt;, &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;HEAD&lt;/code&gt;, &lt;code&gt;OPTIONS&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;PATCH&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="2_1"&gt;2. 模式&lt;/h3&gt;
&lt;p&gt;模式能够自定义，Nancy提供了一些常用的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;字面量 - &lt;code&gt;/some/literal/segments&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;捕获片段 - &lt;code&gt;/{name}&lt;/code&gt;，获取URL的片段，并传给路由的Action&lt;/li&gt;
&lt;li&gt;捕获可选片段 - &lt;code&gt;/{name?}&lt;/code&gt;，添加了一个问号，片段就是可选的了&lt;/li&gt;
&lt;li&gt;捕获可选/默认片段 - &lt;code&gt;/{name?default}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;正则片段 - &lt;code&gt;/(?&amp;lt;age&amp;gt;[\d]{1,2})&lt;/code&gt;，使用命名捕获组来捕获片段，如果不需要捕获，使用非捕获组，比如&lt;code&gt;(?:regex-goes-here)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;贪心片段 - &lt;code&gt;/{name*}&lt;/code&gt;，从/处开始捕获&lt;/li&gt;
&lt;li&gt;贪心正则捕获 - &lt;code&gt;^(?&amp;lt;name&amp;gt;[a-z]{3, 10}(?:/{1})(?&amp;lt;action&amp;gt;[a-z]{5, 10}))$&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;多个捕获片段 - &lt;code&gt;/{file}.{extension}&lt;/code&gt;或者&lt;code&gt;/{file}.ext&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="3"&gt;3. 模式的优先级&lt;/h3&gt;
&lt;h3 id="4"&gt;4. 动作&lt;/h3&gt;
&lt;p&gt;动作时一个lambda表达式&lt;code&gt;Func&amp;lt;dynamic, dynamic&amp;gt;&lt;/code&gt;，输入时&lt;code&gt;DynamicDictionary&lt;/code&gt;，详见&lt;a href="https://github.com/NancyFx/Nancy/wiki/Taking-a-look-at-the-DynamicDictionary"&gt;此处&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;响应可以使任意的model，最终的结果会被&lt;a href="https://github.com/NancyFx/Nancy/wiki/Content-Negotiation"&gt;Content Negotiation&lt;/a&gt;处理。但是如果返回值是&lt;code&gt;Response&lt;/code&gt;类型，则原样返回。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Response&lt;/code&gt;对象有几个隐形转换操作：
1. &lt;code&gt;int&lt;/code&gt;变为Http的状态
2. &lt;code&gt;HttpStatusCode&lt;/code&gt;枚举值
3. &lt;code&gt;string&lt;/code&gt;直接是相应的body
4. &lt;code&gt;Action&amp;lt;Stream&amp;gt;&lt;/code&gt;则写道response stream中&lt;/p&gt;
&lt;h3 id="5"&gt;5. 条件&lt;/h3&gt;
&lt;p&gt;路由条件用来过滤（比如登录非登录）。使用&lt;code&gt;Func&amp;lt;NancyContext, bool&amp;gt;&lt;/code&gt;的lambda表达式定义.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Post["/login", (ctx) =&amp;gt; ctx.Request.Form.remember] = _ =&amp;gt; 
{
     return "Handling code when remember is true!";
}

Post["/login", (ctx) =&amp;gt; !ctx.Request.Form.remember] = _ =&amp;gt; 
{
     return "Handling code when remember is false!";
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="6"&gt;6. 路由片段约束&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;Get&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"/intConstraint/{value:int}"&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"Value "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nt"&gt;_&lt;/span&gt;&lt;span class="nc"&gt;.value&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;" is an integer."&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;只有为int的才会匹配。&lt;/p&gt;
&lt;p&gt;约束：
- &lt;code&gt;int&lt;/code&gt;
- &lt;code&gt;decimal&lt;/code&gt;
- &lt;code&gt;guid&lt;/code&gt;
- &lt;code&gt;bool&lt;/code&gt;
- &lt;code&gt;alpha&lt;/code&gt;
- &lt;code&gt;datetime&lt;/code&gt;
- &lt;code&gt;datetime(format)&lt;/code&gt;
- &lt;code&gt;min(minimum)&lt;/code&gt;
- &lt;code&gt;max(maximum)&lt;/code&gt;
- &lt;code&gt;range(minimum, maximum)&lt;/code&gt;
- &lt;code&gt;minlength(length)&lt;/code&gt;
- &lt;code&gt;maxlength(length)&lt;/code&gt;
- &lt;code&gt;length(minimum, maximum)&lt;/code&gt;&lt;/p&gt;
&lt;h4 id="61"&gt;6.1 自定义约束&lt;/h4&gt;
&lt;p&gt;实现&lt;code&gt;IRouteSegmentConstraint&lt;/code&gt;接口，或者继承自
- &lt;code&gt;RouteSegmentConstraintBase&amp;lt;T&amp;gt;&lt;/code&gt; - Base class for a named constraint.
- &lt;code&gt;ParameterizedRouteSegmentConstraintBase&amp;lt;T&amp;gt;&lt;/code&gt; - Base class for a named constraint that accepts arguments.&lt;/p&gt;
&lt;h5 id="_2"&gt;例子&lt;/h5&gt;
&lt;p&gt;一个email约束&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nl"&gt;EmailRouteSegmentConstraint&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;RouteSegmentConstraintBase&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;override&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;protected&lt;/span&gt; &lt;span class="n"&gt;override&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;TryMatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;constraint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;segment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;out&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;matchedValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;segment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"@"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;matchedValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;segment&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;matchedValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;Get&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"/profile/{value:email}"&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"Value "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nt"&gt;_&lt;/span&gt;&lt;span class="nc"&gt;.value&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;" is an e-mail address."&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="7"&gt;7. 选择去调用路由的秘诀&lt;/h3&gt;
&lt;p&gt;一个请求有时符合多个模式，此时记住：
1. module的顺序在启动时不定
2. 同一module中的路由是按顺序来的
3. 多个匹配中，得分最高的匹配
4. 得分相同的匹配按照启动时的顺序匹配&lt;/p&gt;
&lt;h3 id="8"&gt;8. 疯狂的路由&lt;/h3&gt;
&lt;p&gt;一些可能的用法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// would capture routes like /hello/nancy sent as a GET request&lt;/span&gt;
&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"/hello/{name}"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Hello "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// would capture routes like /favoriteNumber/1234, but not /favoriteNumber/asdf as a GET request&lt;/span&gt;
&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"/favoriteNumber/{value:int}"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"So your favorite number is "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"?"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// would capture routes like /products/1034 sent as a DELETE request&lt;/span&gt;
&lt;span class="n"&gt;Delete&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;@"/products/(?&amp;lt;id&amp;gt;[\d]{1,7})"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// would capture routes like /users/192/add/moderator sent as a POST request&lt;/span&gt;
&lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"/users/{id}/add/{category}"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpStatusCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OK&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="_3"&gt;四、自定义路由&lt;/h2&gt;
&lt;p&gt;http://www.philliphaydon.com/2013/04/nancyfx-implementing-your-own-routing/&lt;/p&gt;
&lt;h2 id="_4"&gt;五、异步&lt;/h2&gt;
&lt;h3 id="1_2"&gt;1. 语法&lt;/h3&gt;
&lt;p&gt;Before/After管道、主路由委托都可以使用async.语法绝大部分与同步代码一致，但需要注意下面的变化：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;before/after钩子接受两个参数，context和cancellation token(取消令牌)，而不仅仅是context&lt;/li&gt;
&lt;li&gt;路由定义有一个附加的bool参数，并且委托接受两个参数，一个捕获的参数，另一个cancellation token.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="2_2"&gt;2 语法例子&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;public&lt;/span&gt; &lt;span class="nt"&gt;MainModule&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Before&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ct&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="err"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddToLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Before Hook Delay\n"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="nt"&gt;After&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nt"&gt;async&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;ct&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddToLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"After Hook Delay\n"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddToLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"After Hook Complete\n"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetLog&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="nt"&gt;Get&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;async&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;ct&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddToLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Delay 1\n"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddToLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Delay 2\n"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddToLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Executing async http client\n"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;HttpClient&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"http://nancyfx.org"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="nb"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadAsStringAsync&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddToLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Response: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;content&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"\n"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetLog&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="dynamicdictionary"&gt;六、查看DynamicDictionary&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;DynamicDictionary&lt;/code&gt;类似字典，但功能更多.从请求中获取的值都保存到它里面。可以使用属性或者index来使用捕获的值。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Get["/hello/{name}"] = parameters =&amp;gt; {
    return "Hello " + parameters.name;
};

Get["/goodbye/{name}"] = parameters =&amp;gt; {
    return "Goodbye " + parameters["name"];
};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;存储的值可以显示或者隐式的转换为基础类型或者特殊属性.使用&lt;code&gt;HasValue&lt;/code&gt;决定是否被赋值。值已经实现了&lt;code&gt;IEquatable&amp;lt;&amp;gt;&lt;/code&gt;和&lt;code&gt;IConvertible&lt;/code&gt;接口。&lt;/p&gt;
&lt;h2 id="modulebeforeafter"&gt;七、module的before/after钩子&lt;/h2&gt;
&lt;p&gt;除了为特定的路由定义处理程序,module还可以拦截匹配某个路由的请求,请求前后都能做到。重要的是要理解,只有传入的请求匹配模块的路由之一，这些拦截器才会被调用。&lt;/p&gt;
&lt;h3 id="1_3"&gt;1. 在路由被调用前拦截请求&lt;/h3&gt;
&lt;p&gt;Before拦截器能让你修改请求，甚至可以通过返回一个response来放弃请求。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Before += ctx =&amp;gt; {
    return &amp;lt;null or a Response object&amp;gt;;
};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;定义Before拦截器的语法与定义路由有些不同。因为它是定义在module上，被所有路由调用，所以不需要匹配模式。&lt;/p&gt;
&lt;p&gt;传给拦截器的是当前请求的NancyContext实例。&lt;/p&gt;
&lt;p&gt;最后的不同就是拦截器的返回值，如果返回&lt;code&gt;null&lt;/code&gt;，拦截器将主动权转给路由；如果返回&lt;code&gt;Response&lt;/code&gt;对象，则路由不起作用。&lt;/p&gt;
&lt;h3 id="2-after"&gt;2. After拦截器&lt;/h3&gt;
&lt;p&gt;与定义Before烂机器相同，但是没有返回值。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;After += ctx =&amp;gt; {
    // Modify ctx.Response
};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Before拦截器可以修改Request，相应的，After拦截器可以修改Response。&lt;/p&gt;
&lt;h2 id="applicationbeforeafteronerror"&gt;八、Application的Before,After和OnError管道&lt;/h2&gt;
&lt;p&gt;应用管道能在所有的路由上执行，是全局性的。&lt;/p&gt;
&lt;h3 id="1before"&gt;1.Before拦截&lt;/h3&gt;
&lt;p&gt;应用级的&lt;code&gt;Before&lt;/code&gt;钩子通过&lt;code&gt;Func&amp;lt;NancyContext, Response&amp;gt;&lt;/code&gt;函数定义：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipelines.BeforeRequest += (ctx) =&amp;gt; {
    return &amp;lt;null or a Response object&amp;gt;;
};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;异步版本的：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipelines.BeforeRequest += async (ctx, token) =&amp;gt; {
    return &amp;lt;null or a Response object&amp;gt;;
};
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="2-after_1"&gt;2. After拦截&lt;/h3&gt;
&lt;p&gt;After拦截器通过`Action&lt;nancycontext&gt;定义：&lt;/nancycontext&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipelines.AfterRequest += (ctx) =&amp;gt; {
    // Modify ctx.Response
};
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="3_1"&gt;3. 错误拦截器&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;OnError&lt;/code&gt;拦截器用来拦截路由发生的错误。通过它可以获取&lt;code&gt;NancyContext&lt;/code&gt;和发生的异常。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;OnError&lt;/code&gt;拦截器通过&lt;code&gt;Func&amp;lt;NancyContext, Exception, Response&amp;gt;&lt;/code&gt;函数定义：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipelines.OnError += (ctx, ex) =&amp;gt; {
    return null;
};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;System.AggregateExceptions在OnError管道中的注意事项：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;路由是通过许多嵌套的Task(&lt;code&gt;System.Threading.Tasks.Task&lt;/code&gt;)来执行的。如果那个任务出现了问题，异常会被包装到&lt;code&gt;System.AggregateException&lt;/code&gt;。&lt;code&gt;System.AggregateException&lt;/code&gt;可以持有任意个异常。&lt;/p&gt;
&lt;p&gt;如果只有一个异常，Nancy会解包异常并且交给&lt;code&gt;OnError&lt;/code&gt;管道。如果发生多个异常，Nancy会使用&lt;code&gt;System.AggregateException&lt;/code&gt;，以避免吞异常。&lt;/p&gt;
&lt;h3 id="4_1"&gt;4. 构建自己的钩子&lt;/h3&gt;
&lt;p&gt;在&lt;a href="https://github.com/NancyFx/Nancy/wiki/Bootstrapper"&gt;Bootstrapper&lt;/a&gt;中创建系统级的钩子.可以在&lt;code&gt;ApplicationStartup&lt;/code&gt;或者&lt;code&gt;RequestStartup&lt;/code&gt;方法中定义它们。这是因为也许你需要在钩子中使用容器中的一些东西。两个方法的不同之处在于范围不同。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;protected override void ApplicationStartup(TinyIoCContainer container, IPipelines pipelines)
{
}

protected override void RequestStartup(TinyIoCContainer requestContainer, IPipelines pipelines, NancyContext context)
{
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过使用&lt;code&gt;pipelines&lt;/code&gt;中适当的属性来创建钩子。它允许你获取&lt;code&gt;BeforeRequest&lt;/code&gt;, &lt;code&gt;AfterRequest&lt;/code&gt;和&lt;code&gt;OnError&lt;/code&gt;属性。&lt;/p&gt;
&lt;h2 id="_5"&gt;九、模型绑定&lt;/h2&gt;
&lt;p&gt;发送数据给Nancy可以有多种方法，比如Query String, 路由捕获参数、请求体request body。手工处理这些不同的方法也可以，但是还有一种方法就是统一处理，绑定到&lt;code&gt;model&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;Nancy只用一行代码就能处理上述的所有情况，并且能接受&lt;code&gt;JSON&lt;/code&gt;和&lt;code&gt;XML&lt;/code&gt;形式的请求。&lt;/p&gt;
&lt;p&gt;也可以扩展Nancy的模型绑定。&lt;/p&gt;
&lt;p&gt;Nancy的模型绑定在&lt;code&gt;NancyModule&lt;/code&gt;中被定义为一个单独的扩展方法。该扩展在&lt;code&gt;Nancy.ModelBinding&lt;/code&gt;命名空间里，并且添加了Bind()和BindTo()方法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Foo f = this.Bind();

var f = this.Bind&amp;lt;Foo&amp;gt;();

var f = this.BindTo(instance);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面3个有着相同的功能，他们提供了做同一事物的不同方法。前两个使用Bind()重载来创建&lt;code&gt;Foo&lt;/code&gt;类型的实例，并且绑定；BindTo()则绑定到现有实例。&lt;/p&gt;
&lt;h3 id="1_4"&gt;1. 屏蔽不想要的信息&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var f = this.Bind&amp;lt;Foo&amp;gt;(f =&amp;gt; f.id, f =&amp;gt; f.creator, f =&amp;gt; f.createddate);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var f = this.Bind&amp;lt;Foo&amp;gt;("id", "creator", "createddate");
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当绑定到到arrary, list或者ienumerable时，屏蔽的是序列中的元素。&lt;/p&gt;
&lt;h3 id="2_3"&gt;2. 绑定配置&lt;/h3&gt;
&lt;p&gt;使用&lt;code&gt;BindingConfig&lt;/code&gt;实例来修改model binder的默认行为。&lt;/p&gt;
&lt;p&gt;下面是&lt;code&gt;BindingConfig&lt;/code&gt;提供的一些配置项：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;默认&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;BodyOnly&lt;/td&gt;
&lt;td&gt;是否只绑定request body。这种情况下，request和context参数都不会被绑定。如果没有body并且没有选项，那么绑定就不会放生&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IgnoreErrors&lt;/td&gt;
&lt;td&gt;是否忽略绑定错误并且继续下一个属性&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Overwrite&lt;/td&gt;
&lt;td&gt;丙丁是否可以覆盖没有默认值的属性&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;不准Overwrite还有一个快捷方法：&lt;code&gt;BindingConfig.NoOverwrite&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="3-rich-request-body-payloads"&gt;3. 反序列化rich request body payloads(负载)&lt;/h3&gt;
&lt;p&gt;有时你像在请求中发送结构化的数据，比如&lt;code&gt;JSON&lt;/code&gt;或者&lt;code&gt;XML&lt;/code&gt;，并且绑定到模型。模型绑定器支持这种反序列化。&lt;/p&gt;
&lt;p&gt;Nancy支持两种反序列化：JSON和XML。绑定器根据Http的&lt;code&gt;Content-type&lt;/code&gt;头来决定使用哪一种反序列化。&lt;/p&gt;
&lt;p&gt;默认使用JSON反序列化来处理&lt;code&gt;application/json&lt;/code&gt;, &lt;code&gt;text/json&lt;/code&gt;和&lt;code&gt;application/vnd....+json&lt;/code&gt;。同样的使用XML反序列化来处理&lt;code&gt;application/xml&lt;/code&gt;, &lt;code&gt;text/xml&lt;/code&gt;和&lt;code&gt;application/vnd....+xml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;对于其他模型绑定器，你可以使用自己的反序列化，并且Nancy会自动检测他们，任何用户定义的绑定器的优先级都高于内建的。
&lt;strong&gt;注意：&lt;/strong&gt;如果你使用Nancy.Json.JsonSetting.MaxJsonLength Exceeded错误，那是因为你的payloads太高了，在Bootstrapper中更改限制：&lt;code&gt;ApplicationStartup&lt;/code&gt;中设置&lt;code&gt;Nancy.Json.JsonSettings.MaxJsonLength=int.MaxValue&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="4-checkbox"&gt;4. 模型绑定Checkbox&lt;/h3&gt;
&lt;p&gt;要绑定复选框到bool值，确定设置&lt;code&gt;value=true&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"rememberMe"&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class LoginModel
{
    public bool RememberMe { get; set; }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="5-list"&gt;5. 绑定到list&lt;/h3&gt;
&lt;h4 id="51-arrary"&gt;5.1 绑定arrary到单独的对象&lt;/h4&gt;
&lt;p&gt;如果有一个form:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/ArrayOnObject"&lt;/span&gt; &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"post"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Tags"&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Tag1,Tag2,Tag3"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Ints"&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"1,2,3,4,4,5,6,3,2,21,1"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Submit"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;而且有一个类：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class Posts
{
  public string[] Tags { get; set; }
  public int[] Ints { get; set; }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用一个简单的语句：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var listOfPosts = this.Bind&amp;lt;Posts&amp;gt;();
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="52-list"&gt;5.2 绑定到对象的list&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/SimpleListDemo"&lt;/span&gt; &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"post"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      User 1:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Name[0]"&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"thecodejunkie"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt; 
      Commits &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Commits[0]"&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"1068"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      User 2:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Name[1]"&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"grumpydev"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;  
      Commits &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Commits[1]"&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"1049"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      User 3:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Name[2]"&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"jchannon"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;  
      Commits &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Commits[2]"&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"109"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      User 4:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Name[3]"&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"prabirshrestha"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;  
      Commits &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Commits[3]"&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"75"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      User 5:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Name[4]"&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"phillip-haydon"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;  
      Commits &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Commits[4]"&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"40"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Test the binding thingy"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以使用&lt;code&gt;this.Bind&amp;lt;List&amp;lt;User&amp;gt;&amp;gt;();&lt;/code&gt;来绑定对象列表：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class User
{
   public string Name { get; set; }
   public int Commits { get; set; }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="53-html-formlist"&gt;5.3 HTML form中的List分隔符&lt;/h4&gt;
&lt;p&gt;两种分隔符&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下划线(&lt;code&gt;Name_1&lt;/code&gt;, &lt;code&gt;Name_2&lt;/code&gt;等)&lt;/li&gt;
&lt;li&gt;括号(&lt;code&gt;Name[1]&lt;/code&gt;, &lt;code&gt;Name[2]&lt;/code&gt;等)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="bootstrapper"&gt;十、Bootstrapper&lt;/h2&gt;
&lt;p&gt;bootstrapper负责自动发现模型、自定义模型绑定、依赖等等。可以被替换掉。&lt;/p&gt;
&lt;h3 id="1-bootstrapper"&gt;1. 简单的修改bootstrapper&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class CustomBootstrapper : DefaultNancyBootstrapper
{
    protected override void ApplicationStartup(TinyIoCContainer container, IPipelines pipelines)
    {
         // your customization goes here
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="2-bootstrapper"&gt;2. 找到合适的bootstrapper&lt;/h3&gt;
&lt;p&gt;应用启动时，它会寻找自定义的bootstrap，如果没有找到，则使用&lt;code&gt;DefaultNancyBootstrap&lt;/code&gt;。每个应用只能有&lt;strong&gt;一个&lt;/strong&gt;bootstrapper. 如果有多个，则Nancy寻找最底层的bootstrapper。&lt;/p&gt;
&lt;h3 id="3_2"&gt;3. 使用自动注册&lt;/h3&gt;
&lt;p&gt;注入自己的依赖到NancyModule中&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class Home : NancyModule
{
    public Home(IMessageService service)
    {
        //If there is only one implementation of IMessageService in the application,
        // TinyIoC will resolve the dependency on its own and inject it in the module.
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="_6"&gt;十一、视图引擎&lt;/h2&gt;
&lt;p&gt;视图引擎就是输入“模板”和“模型”，输出HTML（大部分情况下）到浏览器。&lt;/p&gt;
&lt;p&gt;Nancy默认使用&lt;a href="https://github.com/grumpydev/SuperSimpleViewEngine"&gt;&lt;code&gt;SuperSimpleViewEngine&lt;/code&gt;&lt;/a&gt;。它支持一些必要的功能：layout布局、partials部分、models模型、conditions条件和iterations循环。你可以使用这个而不无需其他依赖。它支持&lt;code&gt;.html&lt;/code&gt;和&lt;code&gt;.sshtml&lt;/code&gt;文件。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@Master['MasterPage']

@Section['Content']
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This content from the index page&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Partials&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Login box below rendered via a partial view with no model.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"login"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        @Partial['login'];
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Box below is rendered via a partial with a sub-model passed in.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;The submodel is a list which the partial iterates over with Each&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"users"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        @Partial['user', Model.Users];
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Encoding&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Model output can also be encoded:&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;@!Model.NaughtyStuff&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
@EndSection
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;除此之外，Nancy还支持Razor, Spark, NDjango和dotLiquid引擎。通过添加引用，Nancy会自动的根据文件后缀名调用对应的引擎。&lt;/p&gt;
&lt;h3 id="1_5"&gt;1. 在路由中渲染视图&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Get["/products"] = parameters =&amp;gt; {
    return View["products.html", someModel];
};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;模板说明：
1. 视图文件名: "products.html"
2. 如果没有后缀，而且有多个同名模板，则会收到&lt;code&gt;AmbigiousViewsException&lt;/code&gt;错误。
3. 一个相对于跟的路径(比如：&lt;code&gt;products/products.html&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;更多参见&lt;a href="https://github.com/NancyFx/Nancy/wiki/View-location-conventions"&gt;视图位置约定&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="2_4"&gt;2.从模型中解析视图的名称&lt;/h3&gt;
&lt;p&gt;如果值传递给View一个模型，Nancy会用模型名（去掉"Model"后缀）作为视图名。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Get["/products"] = parameters =&amp;gt; {
    return View[new ProductsModel()];
};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果找不到，就会报406 Not Acceptable.&lt;/p&gt;
&lt;h2 id="_7"&gt;十二、超简单视图引擎&lt;/h2&gt;
&lt;p&gt;SSVE基于正则，支持&lt;code&gt;sshtml&lt;/code&gt;, &lt;code&gt;html&lt;/code&gt;, &lt;code&gt;html&lt;/code&gt;文件后缀。&lt;/p&gt;
&lt;p&gt;模型可以是标准类型，或者&lt;code&gt;ExpandoObjects&lt;/code&gt;（或者实现了&lt;code&gt;IDynamicMetaObjectProvider&lt;/code&gt; 实现了&lt;code&gt;IDictionary&amp;lt;string, object&amp;gt;&lt;/code&gt;的对象）。&lt;/p&gt;
&lt;p&gt;所有的命令都可以有分号，但不是必须的。&lt;code&gt;[.Parameters]&lt;/code&gt;这样的参数可以使任意层级的，比如&lt;code&gt;This.Property.That.Property&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;注意：所有引号都是_单引号_.&lt;/p&gt;
&lt;h3 id="1_6"&gt;1. 标准变量替换&lt;/h3&gt;
&lt;p&gt;如果变量不能替换，则使用&lt;code&gt;[Err!]&lt;/code&gt;替换。&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@Model[.Parameters]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Hello @Model.Name, your age is @Model.User.Age
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="2_5"&gt;2. 循环&lt;/h3&gt;
&lt;p&gt;循环不能嵌套&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@Each[.Parameters]
   [@Current[.Parameters]]
@EndEach
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;@Each&lt;/code&gt;表示循环；&lt;code&gt;@Current&lt;/code&gt;表示当前变量，使用方法同&lt;code&gt;@Model&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@Each.Users
   Hello @Current.Name!
@EndEach
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="3_3"&gt;3. 条件&lt;/h3&gt;
&lt;p&gt;参数必须是bool，或能隐式转化。嵌套的@If @IfNot不支持。&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@If[Not].Parameters
   [contents]
@EndIf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@IfNot.HasUsers
   No users found!
@EndIf
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="4_2"&gt;4. 隐式条件&lt;/h3&gt;
&lt;p&gt;如果module实现了&lt;code&gt;ICollection&lt;/code&gt;，那你就能使用隐式转换。使用&lt;code&gt;Has&lt;/code&gt;前缀。&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Has[CollectionPropertyName]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@If.HasUsers
   Users found!
@EndIf
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="5-html"&gt;5. HTML编码&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;@Model&lt;/code&gt;和&lt;code&gt;@Current&lt;/code&gt;都可以有一个&lt;code&gt;!&lt;/code&gt;，用来编码HTML：&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@!Model[.Parameter]
@!Current[.Parameter]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@!Model.Test

@Each
   @!Current.Test
@EndEach
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="6-patials"&gt;6. 部分Patials&lt;/h3&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@Partial['&amp;lt;view name&amp;gt;'[, Model.Property]]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// Renders the partial view with the same model as the parent
@Partial['subview.sshtml'];

// Renders the partial view using the User as the model
@Partial['subview.sshtml', Model.User];
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="7-mastersection"&gt;7. Master页和section&lt;/h3&gt;
&lt;p&gt;可以声明master页和节。不必为每个节提供内容。Master能用&lt;code&gt;@Module&lt;/code&gt;，并且扩展名可以省略。&lt;/p&gt;
&lt;p&gt;可以多次使用&lt;code&gt;@Section&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;语法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@Master['&amp;lt;name&amp;gt;']

@Section['&amp;lt;name&amp;gt;']
@EndSection
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// master.sshtml
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
@Section['Content'];
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;

// index.sshtml
@Master['master.sshtml']

@Section['Content']
   This is content on the index page
@EndSection
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="8-token"&gt;8. 防止伪造token&lt;/h3&gt;
&lt;p&gt;防止CSRF&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@AntiForgeryToken
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@AntiForgeryToken
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="9"&gt;9. 路径扩展&lt;/h3&gt;
&lt;p&gt;扩展相对路径为整体路径。&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@Path['&amp;lt;relative-path&amp;gt;']
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@Path['~/relative/url/image.png']
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="10-ssve"&gt;10. 扩展SSVE&lt;/h3&gt;
&lt;h2 id="razor"&gt;十二、Razor引擎&lt;/h2&gt;
&lt;p&gt;这个Razor引擎跟ASP.NET MVC的有点不一样。&lt;/p&gt;
&lt;p&gt;注意，Nancy仍然绑定模型到&lt;code&gt;@Model&lt;/code&gt;，而不是ASP.NET中的&lt;code&gt;@model&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="1-razor"&gt;1. 安装Razor&lt;/h3&gt;
&lt;p&gt;只需要添加&lt;code&gt;Nancy.ViewEngines.Razor.dll&lt;/code&gt;（使用nuget安装&lt;code&gt;Nancy.ViewEngines.Razor&lt;/code&gt;）。然后试图模板以&lt;code&gt;cshtml&lt;/code&gt;或&lt;code&gt;vbhtml&lt;/code&gt;结尾即可。&lt;/p&gt;
&lt;h3 id="2-razor"&gt;2. 配置Razor&lt;/h3&gt;
&lt;h2 id="_8"&gt;十三、实现自己的视图引擎需要注意的地方&lt;/h2&gt;
&lt;h2 id="_9"&gt;十四、视图位置约定&lt;/h2&gt;
&lt;h3 id="1_7"&gt;1. 查看默认约定&lt;/h3&gt;
&lt;p&gt;视图位置的约定通过&lt;code&gt;Func&amp;lt;string, dynamic, ViewLocationContext, string&amp;gt;&lt;/code&gt;方法以及下面的一些默认约定来定义。&lt;/p&gt;
&lt;h4 id="11"&gt;1.1 根约定&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(viewName, model, viewLocationContext) =&amp;gt; {
    return viewName;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个约定会在根目录里寻找视图。但是如果视图包含一个相对路径，视图名称执行对应于根路径的路径。比如，视图&lt;code&gt;admin/index&lt;/code&gt;会在&lt;code&gt;admin/index&lt;/code&gt;目下寻找视图。&lt;/p&gt;
&lt;h4 id="12"&gt;1.2 视图文件夹约定&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(viewName, model, viewLocationContext) =&amp;gt; {
    return string.Concat("views/", viewName);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;很简单，视图&lt;code&gt;admin/index&lt;/code&gt;会在&lt;code&gt;views/admin/index&lt;/code&gt;下查找对应的视图。&lt;/p&gt;
&lt;h4 id="13"&gt;1.3 视图和模块路径约定&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(viewName, model, viewLocationContext) =&amp;gt; {
    return string.Concat("views/", viewLocationContext.ModulePath, "/", viewName);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对于模块products的视图&lt;code&gt;admin/index&lt;/code&gt;，会在&lt;code&gt;views/products/admin/index&lt;/code&gt;中查找视图。&lt;/p&gt;
&lt;h4 id="14"&gt;1.4 模块路径约定&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(viewName, model, viewLocationContext) =&amp;gt; {
    return string.Concat(viewLocationContext.ModulePath, "/", viewName);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个约定会在与模块名相同的文件夹中查找视图。&lt;/p&gt;
&lt;h4 id="15"&gt;1.5 模块名称约定&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(viewName, model, viewLocationContext) =&amp;gt; {
    return string.Concat(viewLocationContext.ModuleName, "/", viewName);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查找以模块名为前缀的对应视图。&lt;/p&gt;
&lt;h4 id="16"&gt;1.6 视图模块名称约定&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(viewName, model, viewLocationContext) =&amp;gt; {
    return string.Concat("views/", viewLocationContext.ModuleName, "/", viewName);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查找views文件夹下以模块名为前缀的对应视图。&lt;/p&gt;
&lt;h3 id="2_6"&gt;2. 从模型类型推断是退名&lt;/h3&gt;
&lt;p&gt;如果没有提供视图名而只提供了视图，那么：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Customer&lt;/code&gt;类型的模型-&amp;gt;&lt;code&gt;Customer&lt;/code&gt;视图名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CustomerModel&lt;/code&gt;类型的模型-&amp;gt; &lt;code&gt;Customer&lt;/code&gt;视图名&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="3_4"&gt;3. 自定义约定&lt;/h3&gt;
&lt;p&gt;自定义一个bootstrapper，然后添加约定到&lt;code&gt;Conventions.ViewLocationConventions&lt;/code&gt;集合。&lt;/p&gt;
&lt;p&gt;比如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class CustomConventionsBootstrapper : DefaultNancyBootstrapper
{
    protected override void ApplicationStartup(TinyIoCContainer container, Nancy.Bootstrapper.IPipelines pipelines)
    {
        this.Conventions.ViewLocationConventions.Add((viewName, model, context) =&amp;gt;
        {
            return string.Concat("custom/", viewName);
        });
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;比如这个会查找custom文件夹下的视图名称。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ViewLocationConventions&lt;/code&gt;是一个标准的列表，可以进行修改。&lt;/p&gt;
&lt;h3 id="3-iconventions"&gt;3. 使用IConventions定义自己的约定&lt;/h3&gt;
&lt;p&gt;你也可以实现&lt;code&gt;IConvention&lt;/code&gt;接口，并在&lt;code&gt;Initialise&lt;/code&gt;方法中添加约定到&lt;code&gt;ViewLocationConventions&lt;/code&gt;属性中。&lt;/p&gt;
&lt;p&gt;Nancy会定位所有接口的实现，并且执行约定，这些发生在他们被传递给bootstrapper的&lt;code&gt;ConfigureConventions&lt;/code&gt;方法之前。&lt;/p&gt;
&lt;h2 id="_10"&gt;十五、本地化&lt;/h2&gt;
&lt;p&gt;Nancy内建了本地化。有一系列的&lt;a href="https://github.com/NancyFx/Nancy/blob/master/src/Nancy/Conventions/DefaultCultureConventions.cs"&gt;约定&lt;/a&gt;描述了如何决定当前文化，还有一些根据文化选择视图的&lt;a href="https://github.com/NancyFx/Nancy/blob/master/src/Nancy/Conventions/DefaultViewLocationConventions.cs"&gt;约定&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;所以，对于&lt;code&gt;de-DE&lt;/code&gt;的文化他会寻找&lt;code&gt;Home-de-DE&lt;/code&gt;的视图。&lt;/p&gt;
&lt;p&gt;不仅如此，还会有rese文件，比如&lt;code&gt;Text.resx&lt;/code&gt;， &lt;code&gt;Text.de-DE.resx&lt;/code&gt;（可以被&lt;a href="https://github.com/NancyFx/Nancy/blob/master/src/Nancy/Localization/ResourceBasedTextResource.cs"&gt;重写&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Razor本地化的&lt;a href="https://github.com/NancyFx/Nancy/tree/master/src/Nancy.Demo.Razor.Localization"&gt;例子&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="_11"&gt;十六、测试应用&lt;/h2&gt;
&lt;p&gt;使用&lt;a href="http://nuget.org/"&gt;NuGet&lt;/a&gt;来安装&lt;code&gt;Nancy.Testing&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;测试应当与主应用分开。&lt;/p&gt;
&lt;p&gt;为了测试路由，使用helper类&lt;code&gt;Browser&lt;/code&gt;。使用bootstrap实例化Browser。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[Fact]&lt;/span&gt;
&lt;span class="err"&gt;public&lt;/span&gt; &lt;span class="err"&gt;void&lt;/span&gt; &lt;span class="err"&gt;Should_return_status_ok_when_route_exists()&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;Given&lt;/span&gt;
    &lt;span class="na"&gt;var bootstrapper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;new DefaultNancyBootstrapper();&lt;/span&gt;
&lt;span class="s"&gt;    var browser = new Browser(bootstrapper);&lt;/span&gt;

    &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;When&lt;/span&gt;
    &lt;span class="na"&gt;var result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;browser.Get("/", with =&amp;gt; {&lt;/span&gt;
&lt;span class="s"&gt;        with.HttpRequest();&lt;/span&gt;
&lt;span class="s"&gt;    });&lt;/span&gt;

    &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;Then&lt;/span&gt;
    &lt;span class="err"&gt;Assert.Equal(HttpStatusCode.OK,&lt;/span&gt; &lt;span class="err"&gt;result.StatusCode)&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="_12"&gt;十七、根路径&lt;/h2&gt;
&lt;p&gt;Nancy通过&lt;code&gt;IRootPathProvider&lt;/code&gt;接口的唯一方法&lt;code&gt;GetRootPath&lt;/code&gt;来确定根路径。&lt;/p&gt;
&lt;h3 id="1_8"&gt;1. 改变跟路径&lt;/h3&gt;
&lt;p&gt;改变根路径需要做两件事：&lt;/p&gt;
&lt;p&gt;首先，自定义一个类实现&lt;code&gt;IRootPathProvider&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class CustomRootPathProvider : IRootPathProvider
{
    public string GetRootPath()
    {
        return "What ever path you want to use as your application root";
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意，根路径是绝对路径。&lt;/p&gt;
&lt;p&gt;其次，在自定义的Bootstrapper中重写&lt;code&gt;RootPathProvider&lt;/code&gt;属性。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class CustomBootstrapper : DefaultNancyBootstrapper
{
    protected override IRootPathProvider RootPathProvider
    {
        get { return new CustomRootPathProvider(); }
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="2_7"&gt;2. 上传文件&lt;/h3&gt;
&lt;p&gt;在Nancy中要上传文件，你需要接受上传文件的content stream, 在磁盘上创建文件，并将stream写入到磁盘。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var uploadDirectory =  Path.Combine(pathProvider.GetRootPath(), "Content", "uploads");

if (!Directory.Exists(uploadDirectory))
{
    Directory.CreateDirectory(uploadDirectory);
}

foreach (var file in Request.Files)
{
    var filename = Path.Combine(uploadDirectory, file.Name);
    using (FileStream fileStream = new FileStream(filename, FileMode.Create))
    {
        file.Value.CopyTo(fileStream);
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上例中的&lt;code&gt;pathProvider&lt;/code&gt;是在模块的构造函数中传递进来的，通过它的&lt;code&gt;GetRootPath()&lt;/code&gt;来获取跟路径。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public HomeModule(IRootPathProvider pathProvider)
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="_13"&gt;十八、管理静态内容&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;简而言之：把东西都放到&lt;code&gt;/Content&lt;/code&gt;文件夹内，仅此而已&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id="_14"&gt;十九、诊断&lt;/h2&gt;
&lt;p&gt;Nancy自带诊断功能：&lt;code&gt;http://&amp;lt;address-of-your-application&amp;gt;/_Nancy/&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="1-dashboard"&gt;1. 配置到dashboard的访问&lt;/h3&gt;
&lt;p&gt;添加密码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nl"&gt;CustomBootstrapper&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DefaultNancyBootstrapper&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;protected&lt;/span&gt; &lt;span class="n"&gt;override&lt;/span&gt; &lt;span class="n"&gt;DiagnosticsConfiguration&lt;/span&gt; &lt;span class="n"&gt;DiagnosticsConfiguration&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;DiagnosticsConfiguration&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;@"A2&lt;/span&gt;&lt;span class="se"&gt;\6&lt;/span&gt;&lt;span class="s"&gt;mVtH/XRT\p,B"&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="2_8"&gt;2. 去除诊断&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class CustomBootstrapper : DefaultNancyBootstrapper
{
    protected override void ApplicationStartup(TinyIoc.TinyIoCContainer container, IPipelines pipelines)
    {
        DiagnosticsHook.Disable(pipelines);
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="3_5"&gt;3. 有哪些工具呢？&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Information&lt;/code&gt;, &lt;code&gt;Interactive Diagnostics&lt;/code&gt;, &lt;code&gt;Request Tracing&lt;/code&gt;, &lt;code&gt;Configuration&lt;/code&gt;&lt;/p&gt;
&lt;h4 id="31"&gt;3.1 信息&lt;/h4&gt;
&lt;h4 id="32"&gt;3.2 配置&lt;/h4&gt;
&lt;p&gt;Nancy中&lt;code&gt;StaticConfiguration&lt;/code&gt;可以用来配置程序的行为，配置页面提供了配置方法。&lt;/p&gt;
&lt;p&gt;注意，系统重启后配置页面的内容失效。&lt;/p&gt;
&lt;p&gt;要想永久保存配置，请在bootstrapper的&lt;code&gt;ApplicationStartup&lt;/code&gt;中设置。&lt;/p&gt;
&lt;h4 id="33"&gt;3.3 请求跟踪&lt;/h4&gt;
&lt;p&gt;请求跟踪因为性能原因默认关闭，可以再&lt;code&gt;Configuration&lt;/code&gt;页开启，也可以这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class CustomBootstrapper : DefaultNancyBootstrapper
{
    protected override void ApplicationStartup(TinyIoC.TinyIoCContainer container, IPipelines pipelines)
    {
        StaticConfiguration.EnableRequestTracing = true;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;跟踪日志可以通过&lt;code&gt;NancyContext&lt;/code&gt;中得到。和容易添加自己的内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class HomeModule : NancyModule
{
    public HomeModule()
    {
        Get["/"] = parameters =&amp;gt; {
            this.Context.Trace.TraceLog.WriteLog(s =&amp;gt; s.AppendLine("Root path was called"));
            return HttpStatusCode.Ok;
        };
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;WriteLog&lt;/code&gt;方法是用一个接受&lt;code&gt;StringBuilder&lt;/code&gt;的函数是为了调试关闭时直接不调用函数，从而避免性能损耗。&lt;/p&gt;
&lt;h4 id="34"&gt;3.4 交互式的诊断&lt;/h4&gt;
&lt;p&gt;只要实现了&lt;code&gt;IDiagnosticsProvider&lt;/code&gt;接口，Nancy诊断会自动发现它，并且把它暴露给交互工具。&lt;/p&gt;
&lt;h5 id="1idiagnosticsprovider"&gt;（1）IDiagnosticsProvider接口&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/// &lt;span class="nt"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
/// Defines the functionality a diagnostics provider.
/// &lt;span class="nt"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
public interface IDiagnosticsProvider
{
    /// &lt;span class="nt"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    /// Gets the name of the provider.
    /// &lt;span class="nt"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    /// &lt;span class="nt"&gt;&amp;lt;value&amp;gt;&lt;/span&gt;A &lt;span class="nt"&gt;&amp;lt;see&lt;/span&gt; &lt;span class="na"&gt;cref=&lt;/span&gt;&lt;span class="s"&gt;"string"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; containing the name of the provider.&lt;span class="nt"&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
   string Name { get; }

   /// &lt;span class="nt"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
   /// Gets the description of the provider.
   /// &lt;span class="nt"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
   /// &lt;span class="nt"&gt;&amp;lt;value&amp;gt;&lt;/span&gt;A &lt;span class="nt"&gt;&amp;lt;see&lt;/span&gt; &lt;span class="na"&gt;cref=&lt;/span&gt;&lt;span class="s"&gt;"string"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; containing the description of the provider.&lt;span class="nt"&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
   string Description { get; }

   /// &lt;span class="nt"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
   /// Gets the object that contains the interactive diagnostics methods.
   /// &lt;span class="nt"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
   /// &lt;span class="nt"&gt;&amp;lt;value&amp;gt;&lt;/span&gt;An instance of the interactive diagnostics object.&lt;span class="nt"&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
   object DiagnosticObject { get; }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id="2_9"&gt;（2）可诊断的对象&lt;/h5&gt;
&lt;p&gt;任何公共方法都会暴露给交互诊断面板。方法可以是能被JSON序列化的任意类型。类型的返回值会被返回成&lt;a href="http://www.servicestack.net/docs/framework/json-report-format"&gt;JSON Report Format&lt;/a&gt;&lt;/p&gt;
&lt;h5 id="3_6"&gt;（3）提供描述给方法&lt;/h5&gt;
&lt;p&gt;两种方法：
1、使用attribute: &lt;code&gt;Nancy.Diagnostics.DescriptionAttribute&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2、使用property：使用与方法同名但添加了&lt;code&gt;Description&lt;/code&gt;后缀的属性，比如&lt;code&gt;NameOfYourMethodDescription&lt;/code&gt;描述了&lt;code&gt;NameOfYourMethod&lt;/code&gt;方法。&lt;/p&gt;
&lt;h5 id="4_3"&gt;（4）自定义模板输出&lt;/h5&gt;
&lt;h5 id="5_1"&gt;（5）创建诊断提供者&lt;/h5&gt;
&lt;h2 id="favicon"&gt;二十、添加自己的favicon&lt;/h2&gt;
&lt;h3 id="1-favicon"&gt;1. 替换默认的FavIcon&lt;/h3&gt;
&lt;p&gt;在应用中防止一个_favicon_的文件，名称以&lt;code&gt;.icon&lt;/code&gt;或&lt;code&gt;.png&lt;/code&gt;结尾即可。&lt;/p&gt;
&lt;h3 id="2-icon"&gt;2. 使用内嵌icon&lt;/h3&gt;
&lt;p&gt;在Bootstrapper中重写&lt;code&gt;FavIcon&lt;/code&gt;属性：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class Bootstrapper : DefaultNancyBootstrapper
{
    private byte[] favicon;

    protected override byte[] FavIcon
    {
        get { return this.favicon?? (this.favicon= LoadFavIcon()); }
    }

    private byte[] LoadFavIcon()
    {
        //TODO: remember to replace 'AssemblyName' with the prefix of the resource
        using (var resourceStream = GetType().Assembly.GetManifestResourceStream("AssemblyName.favicon.ico"))
        {
            var tempFavicon = new byte[resourceStream.Length];
            resourceStream.Read(tempFavicon, 0, (int)resourceStream.Length);
            return tempFavicon;
        }
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="3-icon"&gt;3. 移除ICON&lt;/h3&gt;
&lt;p&gt;设置Bootstrapper的&lt;code&gt;FavIcon&lt;/code&gt;属性为&lt;code&gt;null&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id="_15"&gt;二十一、添加自定义的错误页面&lt;/h2&gt;
&lt;p&gt;第一篇:http://mike-ward.net/blog/post/00824/custom-error-pages-in-nancyfx&lt;/p&gt;
&lt;p&gt;第二篇：https://blog.tommyparnell.com/custom-error-pages-in-nancy/&lt;/p&gt;
&lt;h2 id="_16"&gt;二十二、加密帮助方法&lt;/h2&gt;
&lt;p&gt;命名空间:&lt;code&gt;Nancy.Cryptography&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="1-iencryptionprovider"&gt;1. IEncryptionProvider 接口&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/// &lt;span class="nt"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
/// Provides symmetrical encryption support
/// &lt;span class="nt"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
public interface IEncryptionProvider
{
    /// &lt;span class="nt"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    /// Encrypt and base64 encode the string
    /// &lt;span class="nt"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    /// &lt;span class="nt"&gt;&amp;lt;param&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"data"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Data to encrypt&lt;span class="nt"&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
    /// &lt;span class="nt"&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;Encrypted string&lt;span class="nt"&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
    string Encrypt(string data);

    /// &lt;span class="nt"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    /// Decrypt string
    /// &lt;span class="nt"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    /// &lt;span class="nt"&gt;&amp;lt;param&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"data"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Data to decrypt&lt;span class="nt"&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
    /// &lt;span class="nt"&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;Decrypted string&lt;span class="nt"&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
    string Decrypt(string data);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Nancy提供了两个默认实现&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NoEncryptionProvider&lt;/code&gt;:没有加密，仅仅是base64&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RijndaelEncryptionProvider&lt;/code&gt;: 使用Rijndael算法，使用256位的key和128为的初始向量，加密base64字符串。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="2-ihmacprovider"&gt;2. IHmacProvider 接口&lt;/h3&gt;
&lt;p&gt;用来签名，防止篡改。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/// &lt;span class="nt"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
/// Creates Hash-based Message Authentication Codes (HMACs)
/// &lt;span class="nt"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
public interface IHmacProvider
{
    /// &lt;span class="nt"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    /// Gets the length of the HMAC signature in bytes
    /// &lt;span class="nt"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    int HmacLength { get; }

    /// &lt;span class="nt"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    /// Create a hmac from the given data
    /// &lt;span class="nt"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    /// &lt;span class="nt"&gt;&amp;lt;param&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"data"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Data to create hmac from&lt;span class="nt"&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
    /// &lt;span class="nt"&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;Hmac bytes&lt;span class="nt"&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
    byte[] GenerateHmac(string data);

    /// &lt;span class="nt"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    /// Create a hmac from the given data
    /// &lt;span class="nt"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    /// &lt;span class="nt"&gt;&amp;lt;param&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"data"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Data to create hmac from&lt;span class="nt"&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
    /// &lt;span class="nt"&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;Hmac bytes&lt;span class="nt"&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
    byte[] GenerateHmac(byte[] data);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Nancy也提供了一个默认实现：&lt;code&gt;DefaultHmacProvider&lt;/code&gt;，使用&lt;code&gt;IKeyGenerator&lt;/code&gt;来产生一个key来用SHA-256来进行hash。&lt;/p&gt;
&lt;h3 id="3-ikeygenerator"&gt;3. IKeyGenerator 接口&lt;/h3&gt;
&lt;p&gt;用来产生key来加密和数字签名。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/// &lt;span class="nt"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
/// Provides key byte generation
/// &lt;span class="nt"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
public interface IKeyGenerator
{
    /// &lt;span class="nt"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    /// Generate a sequence of bytes
    /// &lt;span class="nt"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    /// &lt;span class="nt"&gt;&amp;lt;param&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"count"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Number of bytes to return&lt;span class="nt"&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
    /// &lt;span class="nt"&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;Array &lt;span class="nt"&gt;&amp;lt;see&lt;/span&gt; &lt;span class="na"&gt;cref=&lt;/span&gt;&lt;span class="s"&gt;"count"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; bytes&lt;span class="nt"&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
    byte[] GetBytes(int count);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Nancy提供了两个默认实现。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;RandomKeyGenerator&lt;/code&gt;使用&lt;code&gt;RNGCryptoServiceProvider&lt;/code&gt;产生了一个随机定长的key&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PassphraseKeyGenerator&lt;/code&gt;使用密码、静态盐以及可选循环数字，以及&lt;code&gt;Rfc2898DeriveBytes&lt;/code&gt;来产生一个key&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;，如果使用&lt;code&gt;PassphraseKeyGenerator&lt;/code&gt;，它的初始化应当在应用启动时使用，因为它太慢了。这意味着盐是静态的，因此密码一定要足够长和复杂。&lt;/p&gt;
&lt;h3 id="4-cryptographyconfiguration"&gt;4. 加密配置类型CryptographyConfiguration&lt;/h3&gt;
&lt;p&gt;这是一个存储&lt;code&gt;IEncryptionProvider&lt;/code&gt;和&lt;code&gt;IHmacProvider&lt;/code&gt;的简便方法。它有两个静态属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Default&lt;/code&gt;使用&lt;code&gt;RijndaelEncryptionProvider&lt;/code&gt;和&lt;code&gt;DefaultHmacProvider&lt;/code&gt;，两个都使用&lt;code&gt;RandomKeyGenerator&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NoEncryption&lt;/code&gt;使用&lt;code&gt;NoEncryption&lt;/code&gt;和&lt;code&gt;DefaultHmacProvider&lt;/code&gt;，两个也都使用&lt;code&gt;RandomKeyGenerator&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以单独使用&lt;code&gt;CryptographyConfiguration&lt;/code&gt;，也可以在bootstrapper中配置一个：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/// &lt;span class="nt"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
/// Gets the cryptography configuration
/// &lt;span class="nt"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
protected virtual CryptographyConfiguration CryptographyConfiguration
{
    get { return CryptographyConfiguration.Default; }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="content-negotiation"&gt;二十三、Content negotiation(内容协商)&lt;/h2&gt;
&lt;p&gt;当返回不是&lt;code&gt;Response&lt;/code&gt;类型时，使用response processor来根据请求的&lt;code&gt;Accept&lt;/code&gt;来处理。&lt;/p&gt;
&lt;h3 id="1-response-processor"&gt;1. Response Processor&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public interface IResponseProcessor
{
    /// &lt;span class="nt"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    /// Gets a set of mappings that map a given extension (such as .json)
    /// to a media range that can be sent to the client in a vary header.
    /// &lt;span class="nt"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    IEnumerable&lt;span class="nt"&gt;&amp;lt;Tuple&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;string,&lt;/span&gt; &lt;span class="err"&gt;MediaRange&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&amp;gt; ExtensionMappings { get; }

    /// &lt;span class="nt"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    /// Determines whether the the processor can handle a given content type and model.
    /// &lt;span class="nt"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    ProcessorMatch CanProcess(MediaRange requestedMediaRange, dynamic model, NancyContext context);

    /// &lt;span class="nt"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    /// Process the response.
    /// &lt;span class="nt"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    Response Process(MediaRange requestedMediaRange, dynamic model, NancyContext context);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Response Processor是自发现的，也可以在Bootstrap中配置。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class Bootstrapper : DefaultNancyBootstrapper
{
    protected override NancyInternalConfiguration InternalConfiguration
    {
        get
        {
            var processors = new[]
            {
                typeof(SomeProcessor),
                typeof(AnotherProcessor)
            };

            return NancyInternalConfiguration.WithOverrides(x =&amp;gt; x.ResponseProcessors = processors);
        }
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="11_1"&gt;1.1 匹配优先级&lt;/h4&gt;
&lt;p&gt;当相应准备转化请求媒体的格式时，Nancy会查询所有的processor的&lt;code&gt;CanProcess&lt;/code&gt;方法，并且会聚合&lt;code&gt;ProcessorMatch&lt;/code&gt;的返回值。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ProcessorMatch&lt;/code&gt;类型确保每个processor让Nancy知道它们对媒体类型的支持程度。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class ProcessorMatch
{
    /// &lt;span class="nt"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    /// Gets or sets the match result based on the content type
    /// &lt;span class="nt"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    public MatchResult RequestedContentTypeResult { get; set; }

    /// &lt;span class="nt"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    /// Gets or sets the match result based on the model
    /// &lt;span class="nt"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    public MatchResult ModelResult { get; set; }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;MatchResult&lt;/code&gt;枚举了匹配程度：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public enum MatchResult
{
    /// &lt;span class="nt"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    /// No match, nothing to see here, move along
    /// &lt;span class="nt"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    NoMatch,

    /// &lt;span class="nt"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    /// Will accept anything
    /// &lt;span class="nt"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    DontCare,

    /// &lt;span class="nt"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    /// Matched, but in a non-specific way such as a wildcard match or fallback
    /// &lt;span class="nt"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    NonExactMatch,

    /// &lt;span class="nt"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    /// Exact specific match
    /// &lt;span class="nt"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    ExactMatch
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所有的&lt;code&gt;ProcessorMatch&lt;/code&gt;会按照Match程度降序排列，最匹配的被执行。如果有两个匹配程度相同，Nancy会选择其中一个。&lt;/p&gt;
&lt;h4 id="12_1"&gt;1.2 默认响应处理器&lt;/h4&gt;
&lt;p&gt;Nancy提供了一些默认响应处理器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JsonProcessor&lt;/code&gt; - 当请求类型为&lt;code&gt;application/json&lt;/code&gt;或者&lt;code&gt;application/vnd.foobar+json&lt;/code&gt;时，转化返回值为json；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ViewProcessor&lt;/code&gt; - 当请求类型为&lt;code&gt;text/html&lt;/code&gt;时，使用返回值作为model，返回视图。视图使用&lt;a href="https://github.com/NancyFx/Nancy/wiki/View-location-conventions"&gt;视图位置约定&lt;/a&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XmlProcessor&lt;/code&gt; - 当请求为&lt;code&gt;application/xml&lt;/code&gt;或者为&lt;code&gt;application/vnd.foobar+xml&lt;/code&gt;时，返回xml。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="2_10"&gt;2. 控制协商&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Nancy.Responses.Negotiation&lt;/code&gt;命名空间中的&lt;code&gt;Negotiator&lt;/code&gt;用来控制协商。&lt;code&gt;Negotiator&lt;/code&gt;有一个属性：&lt;code&gt;NegotiationContext&lt;/code&gt;. &lt;code&gt;NegotiationContext&lt;/code&gt;可以用来控制响应的协商。&lt;/p&gt;
&lt;p&gt;但是一般不会直接使用&lt;code&gt;Negotiator&lt;/code&gt;和&lt;code&gt;NegotiationContext&lt;/code&gt;，因为&lt;code&gt;NancyModule&lt;/code&gt;包含了一个帮助方法&lt;code&gt;Negotiate&lt;/code&gt;，用来更好的创造&lt;code&gt;Negotiator&lt;/code&gt;实例。&lt;/p&gt;
&lt;p&gt;在路由中使用&lt;code&gt;Negotiator&lt;/code&gt;的例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Get["/"] = parameters =&amp;gt; {
    return Negotiate
        .WithModel(new RatPack {FirstName = "Nancy "})
        .WithMediaRangeModel("text/html", new RatPack {FirstName = "Nancy fancy pants"})
        .WithView("negotiatedview")
        .WithHeader("X-Custom", "SomeValue");
};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Negotiator&lt;/code&gt;包含了用来配置返回&lt;code&gt;Negotiator&lt;/code&gt;实例的一些方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WithHeader&lt;/code&gt; - 添加一个Http头；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WithHeaders&lt;/code&gt; - 添加一个Http的头集合；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WithView&lt;/code&gt; - 使用视图；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WithModel&lt;/code&gt; - 使用模型；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WithMediaRangeModel&lt;/code&gt; - 使用特定的媒体类型和模型，如果失败了，就使用&lt;code&gt;WithModel&lt;/code&gt;指定的模型；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WithFullNegotiation&lt;/code&gt; - 设置允许媒体类型为&lt;code&gt;*/*&lt;/code&gt;的帮助方法；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WithAllowedMediaRange&lt;/code&gt; - 指定允许的媒体范围。默认是"/",但是一旦指定一个特定的内容类型，通配符就会被移走。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WithStatusCode&lt;/code&gt; - 状态码&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="3_7"&gt;3. 支持文件扩展名&lt;/h3&gt;
&lt;p&gt;Nancy支持基于扩展名来设置协商的处理，此时传递正常的可接受的头。&lt;/p&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Get["/ratpack"] = parameters =&amp;gt; {
    return new RatPack {FirstName = "Nancy "});
};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;它既可以通过&lt;code&gt;/ratpack&lt;/code&gt;和设置的&lt;code&gt;application/json&lt;/code&gt;头来调用，也可以使用&lt;code&gt;/ratpack.json&lt;/code&gt;并且不设置&lt;code&gt;application/json&lt;/code&gt;来调用，两个结果一样。&lt;/p&gt;
&lt;p&gt;内部Nancy是通过检测扩展名，并查询可用的响应处理器的&lt;code&gt;ExtensionMappings&lt;/code&gt;属性来查看是否有支持的扩展。如果有，就调用并且设置对应的头信息，但是如果有更优先的处理器，则用更优先的处理器，除非更优先的处理器失败了，才会使用扩展。&lt;/p&gt;
&lt;h3 id="4-accept-header"&gt;4. 强制可接受的头(Accept Header)&lt;/h3&gt;
&lt;p&gt;约定的格式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Func&amp;lt;
   IEnumerable&amp;lt;Tuple&amp;lt;string, decimal&amp;gt;&amp;gt;,
   NancyContext,
   IEnumerable&amp;lt;Tuple&amp;lt;string, decimal&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个函数接受&lt;code&gt;NancyContext&lt;/code&gt;和当前头，并且期望你返回修改后的可接受头列表。&lt;/p&gt;
&lt;p&gt;默认情况下，Nancy在&lt;code&gt;Nancy.Conventions.BuiltInAcceptHeaderCoercions class&lt;/code&gt;中提供了如下约定，其中加*的表示是默认默认被转换的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BoostHtml&lt;/code&gt;(*) - 如果text/html的优先级低于其他内容类型，则提高优先级；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CoerceBlankAcceptHeader&lt;/code&gt;(*) - 如果没有指定请求头，就分配一个默认的；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CoerceStupidBrowsers&lt;/code&gt; - 对于老浏览器，替换请求头，即使它们说是请求xml还是返回html。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更改哪一个强制起作用时在bootstrapper中的&lt;code&gt;ConfigureConventions&lt;/code&gt;来设置的：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class Bootstrapper : DefaultNancyBootstrapper
{
    protected override void ConfigureConventions(NancyConventions nancyConventions)
    {
        base.ConfigureConventions(nancyConventions);

        this.Conventions.AcceptHeaderCoercionConventions.Add((acceptHeaders, ctx) =&amp;gt; {

            // Modify the acceptHeaders by adding, removing or updating the current
            // values.

            return acceptHeaders;
        });
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当然你也可以继承你自己的bootstrapper。&lt;/p&gt;
&lt;h3 id="5-iconventions"&gt;5. 使用IConventions来定义自己的约定&lt;/h3&gt;
&lt;p&gt;可以通过实现&lt;code&gt;IConventions&lt;/code&gt;接口来创造一个类，并在它的&lt;code&gt;Initialise&lt;/code&gt;方法中添加自己的约定到传递进来的参数的&lt;code&gt;AcceptHeaderCoercionConventions&lt;/code&gt;属性中。&lt;/p&gt;
&lt;p&gt;在所有的接口被传递给bootstrapper的&lt;code&gt;ConfigureConventions&lt;/code&gt;的方法之前，Nancy会定位所有的接口实现，并且激发这些约定。&lt;/p&gt;
&lt;h3 id="6_1"&gt;6. 自动协商头&lt;/h3&gt;
&lt;p&gt;Nancy会自动添加链接和各种各样的头到协商响应中。链接头链接。连接头会连接到根据文件扩展来的其他代表中。&lt;/p&gt;
&lt;h3 id="7_1"&gt;7. 更多信息&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.philliphaydon.com/2012/11/nancy-and-content-negotiation/"&gt;Nancy and Content Negotiation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.philliphaydon.com/2013/04/nancyfx-revisiting-content-negotiation-and-apis-part-1/"&gt;Revisting Content Negotiation and APIs part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.philliphaydon.com/2013/05/nancyfx-revisiting-content-negotiation-and-apis-part-2/"&gt;Revisting Content Negotiation and APIs part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.philliphaydon.com/2013/05/nancyfx-revisiting-content-negotiation-and-apis-part-3/"&gt;Revisting Content Negotiation and APIs part 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_17"&gt;二十四、使用转换器来扩展序列化&lt;/h2&gt;
&lt;h2 id="_18"&gt;二十五、授权&lt;/h2&gt;
&lt;p&gt;Nancy中的验证使用扩展点：比如应用管道、模块管道、&lt;code&gt;NancyContext&lt;/code&gt;和其他的一些扩展方法。所以你可以写自己的验证来替换默认提供的验证。&lt;/p&gt;
&lt;p&gt;Nancy提供了以下几种验证，通过Nuget安装：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;表单(&lt;code&gt;Nancy.Authentication.Forms&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;基本(&lt;code&gt;Nancy.Authentication.Basic&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;无状态(&lt;code&gt;Nancy.Authentication.Stateless&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="1_9"&gt;1. 了解用户&lt;/h3&gt;
&lt;p&gt;Nancy中用户使用&lt;code&gt;IUserIdentity&lt;/code&gt;接口代表，它提供了一些用户的基本信息：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public interface IUserIdentity
{
    /// &lt;span class="nt"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    /// Gets or sets the name of the current user.
    /// &lt;span class="nt"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    string UserName { get; set; }

    /// &lt;span class="nt"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    /// Gets or set the claims of the current user.
    /// &lt;span class="nt"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    IEnumerable&lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt; Claims { get; set; } 
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你应当提供基于自己应用需求的类来实现自己的用户接口。&lt;/p&gt;
&lt;p&gt;要获得当前用户，只需要获取&lt;code&gt;NancyContext&lt;/code&gt;的&lt;code&gt;CurrentUser&lt;/code&gt;属性。返回&lt;code&gt;null&lt;/code&gt;值表明当前请求未认证，其他的则表示已认证。&lt;/p&gt;
&lt;p&gt;context在Nancy的大部分地方都能获取，所以不必担心能否获取当前请求的用户身份。&lt;/p&gt;
&lt;h3 id="2_11"&gt;2. 保护你的资源&lt;/h3&gt;
&lt;p&gt;可以在模块级和应用级来保护资源，方法是检测&lt;code&gt;NancyContext.CurrentUser&lt;/code&gt;属性不为null。&lt;/p&gt;
&lt;p&gt;这个任务可以通过在&lt;a href="https://github.com/NancyFx/Nancy/wiki/The%20before%20and%20after%20module%20hooks"&gt;模块管道&lt;/a&gt;的&lt;code&gt;Before&lt;/code&gt;中实现。这个钩子允许我们终结当前请求的执行，返回其它资源，比如当未验证用户视图访问安全资源时：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class SecureModule : NancyModule
{
    public SecureModule()
    {
        Before += ctx =&amp;gt; {
            return (this.Context.CurrentUser == null) ? new HtmlResponse(HttpStatusCode.Unauthorized) : null;
        };

        // Your routes here
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在每个模块上添加安全代码违反了DRY原则，更是一个无聊的任务。使用扩展方法！&lt;/p&gt;
&lt;p&gt;Nancy有一些扩展方法包装了这些任务，彻底的减少了要写的代码量。&lt;/p&gt;
&lt;p&gt;下面是一些可用的扩展方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;RequiresAuthentication&lt;/code&gt; - 确保验证用户是可用的，或者返回&lt;code&gt;HttpStatusCode.Unauthorized&lt;/code&gt;. 对于认证的用户，&lt;code&gt;CurrentUser&lt;/code&gt;不能为&lt;code&gt;null&lt;/code&gt;，而且&lt;code&gt;UserName&lt;/code&gt;不能为空；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RequiresClaims&lt;/code&gt; - 用户必须满足声明列表中所有的条件才能获取资源；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RequiresAnyClaim&lt;/code&gt; - 见上一条，但是只需满足任意一条；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RequiresValidatedClaims&lt;/code&gt; - 通过自定义函数，来全部自我掌控验证流程，函数格式&lt;code&gt;Func&amp;lt;IEnumerable&amp;lt;string&amp;gt;, bool&amp;gt;&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RequiresHttps&lt;/code&gt; - 只允许https访问；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些都是&lt;code&gt;NancyModule&lt;/code&gt;类的扩展方法，要使用它们需要添加&lt;code&gt;Nancy.Security&lt;/code&gt;命名空间。&lt;/p&gt;
&lt;p&gt;使用扩展方法，前面的例子可以这样写：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class SecureModule : NancyModule
{
    public SecureModule()
    {
        this.RequiresAuthentication();
    }

    // Your routes here
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当然还可以这样写：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class SecureModule : NancyModule
{
    public SecureModule()
    {
        this.RequiresHttps();
        this.RequiresAuthentication();
        this.RequiresClaims(new [] { "Admin" });
    }

    // Your routes here
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用户必须通过https，被授权，而且拥有Admin claim才能访问上面的路由。&lt;/p&gt;
&lt;h3 id="3_8"&gt;3. 创造你自己的安全扩展&lt;/h3&gt;
&lt;p&gt;为了创造自己的安全扩展，你只需要添加扩展方法到&lt;code&gt;NancyModule&lt;/code&gt;，并且绑定到&lt;code&gt;Before&lt;/code&gt;管道，并检查证书。&lt;/p&gt;
&lt;p&gt;比如，下面说明了&lt;code&gt;RequiresAuthentication&lt;/code&gt;如何工作的：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public static class ModuleSecurity
{
    public static void RequiresAuthentication(this NancyModule module)
    {
        module.Before.AddItemToEndOfPipeline(RequiresAuthentication);
    }

    private static Response RequiresAuthentication(NancyContext context)
    {
        Response response = null;
        if ((context.CurrentUser == null) ||
            String.IsNullOrWhiteSpace(context.CurrentUser.UserName))
        {
            response = new Response { StatusCode = HttpStatusCode.Unauthorized };
        }

        return response;
    }

}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="4-provider"&gt;4. 实现自己的验证provider&lt;/h3&gt;
&lt;p&gt;实际的验证provider实现根据不同的需求变化很大，但是基本模式如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/NancyFx/Nancy/wiki/The%20Application%20Before,%20After%20and%20OnError%20pipelines"&gt;应用管道&lt;/a&gt;的&lt;code&gt;Before&lt;/code&gt;钩子用来检查请求的证书（比如cookie, headers等等）。如果发现证书，则验证用户并授权给&lt;code&gt;NancyContext&lt;/code&gt;的&lt;code&gt;CurrentUser&lt;/code&gt;属性。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/NancyFx/Nancy/wiki/The%20before%20and%20after%20module%20hooks"&gt;模块管道&lt;/a&gt;的&lt;code&gt;Before&lt;/code&gt;钩子用来确认当前的请求是被认证的用户执行，如果不是，则拒绝并返回&lt;code&gt;HttpStatusCode.Unauthorized&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/NancyFx/Nancy/wiki/The%20Application%20Before,%20After%20and%20OnError%20pipelines"&gt;应用管道&lt;/a&gt;的&lt;code&gt;After&lt;/code&gt;钩子用来检查请求是否因为认证失败而被丢弃，比如检查&lt;code&gt;HttpStatusCode.Unauthorized&lt;/code&gt;(401)状态码。如果检测到了就帮助用户去认证，比如重定向到login表单或者使用header的帮助通知客户端。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="5_2"&gt;5. 无状态认证&lt;/h3&gt;
&lt;p&gt;无状态认证就是在每个请求中进行检查，根据请求的一些信息，来决定是否应该被确认为一个已认证的请求。&lt;/p&gt;
&lt;p&gt;比如你检查请求来确认查询字符串的参数是否传递了api key，或者是否包含某些head， 有或者请求是否来自某些特定的ip。&lt;/p&gt;
&lt;p&gt;使用无状态认证需要做下面几件事：
1. 安装&lt;code&gt;Nancy.Authentication.Stateless&lt;/code&gt;包
2. 配置并开启无状态认证
3. &lt;a href="https://github.com/NancyFx/Nancy/wiki/Authentication-overview"&gt;保护资源&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="51"&gt;5.1 配置并开启无状态认证&lt;/h4&gt;
&lt;p&gt;在bootstrapper中添加：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;StatelessAuthentication.Enable(pipelines, statelessAuthConfiguration);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;被传递到&lt;code&gt;StatelessAuthentication.Enable&lt;/code&gt;方法中的&lt;code&gt;statelessAuthConfiguration&lt;/code&gt;变量，是一个&lt;code&gt;StatelessAuthenticationConfiguration&lt;/code&gt;类型的实例，它能够让你自定义无状态认证提供者的行为。&lt;/p&gt;
&lt;p&gt;定义&lt;code&gt;StatelessAuthenticationConfiguration&lt;/code&gt;类型实例的时候，需要有一个&lt;code&gt;Func&amp;lt;NancyContext, IUserIdentity&amp;gt;&lt;/code&gt;类型的参数。这个函数用来检查请求或者context中的其他相关内容，并且在请求未通过验证时返回&lt;code&gt;null&lt;/code&gt;，否则返回合适的&lt;a href="https://github.com/NancyFx/Nancy/wiki/Authentication-overview"&gt;&lt;code&gt;IUserIdentity&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id="52"&gt;5.2 简单配置&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var configuration =
    new StatelessAuthenticationConfiguration(ctx =&amp;gt;
    {
        if (!ctx.Request.Query.apikey.HasValue)
        {
            return null;
        }

        // This would where you authenticated the request. IUserApiMapper is
        // not a Nancy type.
        var userValidator = 
            container.Resolve&amp;lt;IUserApiMapper&amp;gt;();

        return userValidator.GetUserFromAccessToken(ctx.Request.Query.apikey);
    });
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="6-form"&gt;6. Form认证&lt;/h3&gt;
&lt;p&gt;详细例子见Nancy解决方案中&lt;code&gt;Nancy.Demo.Authentication.Forms&lt;/code&gt;例子&lt;/p&gt;
&lt;p&gt;为了开启form认证，需要完成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装&lt;code&gt;Nancy.Authentication.Forms&lt;/code&gt;包&lt;/li&gt;
&lt;li&gt;实现&lt;code&gt;IUserMapper&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;实现路由来处理login和logout&lt;/li&gt;
&lt;li&gt;配置并开启Form认证&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="61-user-mapper"&gt;6.1 User mapper&lt;/h4&gt;
&lt;p&gt;User mapper用来负责从标示符identifier映射到用户。标示符是一个令牌，被存储在认证cookie中，用来代表执行请求的用户身份，避免每次请求时输入证书。&lt;/p&gt;
&lt;p&gt;使用GUID来做标示符，如果用username来做标示符容易被嗅探并攻击。GUID还很难读取，而且每个GUID都不一样，增加了嗅探的难度。&lt;/p&gt;
&lt;p&gt;注意，需要知道标示符对每个用户来说都是永久的并且是唯一的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;IUserMapper&lt;/code&gt;接口的定义：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public interface IUserMapper
{
    /// &lt;span class="nt"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    /// Get the real username from an identifier
    /// &lt;span class="nt"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    /// &lt;span class="nt"&gt;&amp;lt;param&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"identifier"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;User identifier&lt;span class="nt"&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
    /// &lt;span class="nt"&gt;&amp;lt;param&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"context"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;The current NancyFx context&lt;span class="nt"&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
    /// &lt;span class="nt"&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;Matching populated IUserIdentity object, or empty&lt;span class="nt"&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
    IUserIdentity GetUserFromIdentifier(Guid identifier, NancyContext context);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="62-form"&gt;6.2 修改应用，处理form认证&lt;/h4&gt;
&lt;p&gt;有了&lt;code&gt;IUserMapper&lt;/code&gt;后，下一步就是在不需要认证的地方添加login和logout了。&lt;/p&gt;
&lt;p&gt;下面是一个模块的基础框架。请注意资源的路径和模块的名称可以使任意的：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class LoginModule : NancyModule
{
    public LoginModule()
    {
        Get["/login"] = parameters =&amp;gt; {
            // Called when the user visits the login page or is redirected here because
            // an attempt was made to access a restricted resource. It should return
            // the view that contains the login form
        };

        Get["/logout"] = parameters =&amp;gt; {
            // Called when the user clicks the sign out button in the application. Should
            // perform one of the Logout actions (see below)
        };

        Post["/login"] = parameters =&amp;gt; {
            // Called when the user submits the contents of the login form. Should
            // validate the user based on the posted form data, and perform one of the
            // Login actions (see below)
        };
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Nancy.Authentication.Forms&lt;/code&gt;命名空间中有一些扩展方法可供使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LoginAndRedirect&lt;/code&gt; - 登录用户并重定向用户到他们来时的url。或者也可以提供一个预留的url，用来在没有重定向url时使用。如果使用form提交，注意使用action=""，因为它会保留returnUrl原封不动。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LoginWithoutRedirect&lt;/code&gt; - 登录用户，并且返回响应和状态码200(ok)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Login&lt;/code&gt;会调用当前请求的&lt;code&gt;IsAjaxRequest&lt;/code&gt;的扩展方法，并且如果不是Ajax调用，则执行&lt;code&gt;LoginAndRedirect&lt;/code&gt;方法，否则执行&lt;code&gt;LoginWithoutRedirect&lt;/code&gt;方法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LogoutAndRedirect&lt;/code&gt; - 登出用户，并提供重定向&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LogoutWithoutRedirect&lt;/code&gt; - 登出用户并返回状态码为200(OK)的响应&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Logout&lt;/code&gt;会调用当前请求的&lt;code&gt;IsAjaxRequest&lt;/code&gt;方法，如果不是ajax请求，则执行&lt;code&gt;LogoutAndRedirect&lt;/code&gt;，否则执行&lt;code&gt;LogoutWithoutRedirect&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注意1：&lt;/strong&gt; &lt;code&gt;Nancy.Extensions.RequestExtensions&lt;/code&gt;中的&lt;code&gt;IsAjaxRequest&lt;/code&gt;扩展方法会检查&lt;code&gt;X-Requested-With&lt;/code&gt;头，并且在其包含值&lt;code&gt;XMLHttpRequest&lt;/code&gt;时返回true&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意2：&lt;/strong&gt; 请确认路径的定义login和logout的页面没有要求使用登录。&lt;/p&gt;
&lt;h4 id="63-form"&gt;6.3 启用form认证&lt;/h4&gt;
&lt;p&gt;在bootstrapper中添加：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;FormsAuthentication.Enable(pipelines, formsAuthConfiguration);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;既可以在&lt;code&gt;ApplicationStartup&lt;/code&gt;中又可以在&lt;code&gt;RequestStartup&lt;/code&gt;中添加。到底在何处加，取决于&lt;code&gt;IUserMapper&lt;/code&gt;，即user mapper到底是有应用级的生命周期还是请求级的生命周期。&lt;/p&gt;
&lt;p&gt;传递给&lt;code&gt;FormsAuthentication.Enable&lt;/code&gt;方法的&lt;code&gt;formsAuthConfiguration&lt;/code&gt;变量是&lt;code&gt;FormsAuthenticationConfiguration&lt;/code&gt;类型，它能让你自定义form认证提供者的行为。&lt;/p&gt;
&lt;p&gt;比如，下面是一个基本的认证配置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var formsAuthConfiguration =
new FormsAuthenticationConfiguration()
{
    RedirectUrl = "~/login",
    UserMapper = container.Resolve&amp;lt;IUserMapper&amp;gt;(),
};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面是一些配置项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;RedirectingQuerystringKey&lt;/code&gt;：默认名是&lt;code&gt;returnUrl&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RedirectingUrl&lt;/code&gt;：未认证的用户应当被重定向的url，一般是登录页面&lt;code&gt;~/login&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UserMapper&lt;/code&gt;: &lt;code&gt;IUserMapper&lt;/code&gt;在认证时应该被使用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RequiresSSL&lt;/code&gt;: SSL&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DisableRedirect&lt;/code&gt;: 遇到未认证时，是否重定向到登陆页&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CryptographyConfiguration&lt;/code&gt;: &lt;code&gt;CryptographyConfiguration.Default&lt;/code&gt;与form认证cookie配合使用。&lt;code&gt;CryptographyConfiguration.Default&lt;/code&gt;是默认的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="64"&gt;6.4 关于加密，还有一些话&lt;/h4&gt;
&lt;p&gt;默认使用&lt;code&gt;RandomKeyGenerator&lt;/code&gt;，这意味着每次程序启动时会产生一个新的秘钥，那么应用重启回到这认证cookie失效，在多台机器负载均衡时也会出现这种问题，别怕，看看&lt;a href="https://github.com/NancyFx/Nancy/wiki/The%20cryptography%20helpers"&gt;加密配置&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下面是一个例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var cryptographyConfiguration = new CryptographyConfiguration(
    new RijndaelEncryptionProvider(new PassphraseKeyGenerator("SuperSecretPass", new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 })),
    new DefaultHmacProvider(new PassphraseKeyGenerator("UberSuperSecure", new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 })));

var config = 
    new FormsAuthenticationConfiguration()
    {
        CryptographyConfiguration = cryptographyConfiguration,
        RedirectUrl = "/login",
        UserMapper = container.Resolve&amp;lt;IUserMapper&amp;gt;(),
    };
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="65"&gt;6.5 跟多&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.philliphaydon.com/2012/12/forms-authentication-with-nancyfx/"&gt;Forms authentication with nancyfx&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.philliphaydon.com/2012/12/configuring-multiple-forms-authentication-sections-with-nancyfx/"&gt;Multiple forms authentication sections&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="7_2"&gt;7. 令牌认证&lt;/h3&gt;
&lt;p&gt;详细例子在Nancy解决方案中的&lt;code&gt;Nancy.Demo.Authentication.Token&lt;/code&gt;中。&lt;/p&gt;
&lt;h4 id="71-nancy"&gt;7.1 认识Nancy的令牌认证&lt;/h4&gt;
&lt;p&gt;Nancy令牌认证工程是为了多种客户端(iOS, Android, Angular SPA等等)能与统一后台Nancy应用而创建的。&lt;/p&gt;
&lt;h4 id="72"&gt;7.2 基本原理&lt;/h4&gt;
&lt;p&gt;令牌认证与授权在下面这些需求下应运而生：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;没有cookie（不适所有的客户端都是浏览器）&lt;/li&gt;
&lt;li&gt;避免一旦用户被认证/授权后，从后端数据存储中取回用户和权限信息&lt;/li&gt;
&lt;li&gt;允许客户端应用在第一次授权后保存令牌，以便为后续请求使用&lt;/li&gt;
&lt;li&gt;通过单向加密算法确保令牌没有被篡改，阻止嗅探冒充令牌攻击&lt;/li&gt;
&lt;li&gt;使用有期限的可配置的key来进行令牌生成&lt;/li&gt;
&lt;li&gt;使用server端的文件系统来存储私钥，这样即使应用重启也能恢复。注意：可以使用内存存储作为测试。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="73"&gt;7.3 使用&lt;/h4&gt;
&lt;h5 id="731-nancy"&gt;7.3.1 Nancy配置&lt;/h5&gt;
&lt;p&gt;令牌认证可以像form认证那样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class Bootstrapper : DefaultNancyBootstrapper
{
    protected override void RequestStartup(TinyIoCContainer container, IPipelines pipelines, NancyContext context)
    {
        TokenAuthentication.Enable(pipelines, new TokenAuthenticationConfiguration(container.Resolve&amp;lt;ITokenizer&amp;gt;()));
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;令牌从&lt;code&gt;IUserIdentity&lt;/code&gt;和&lt;code&gt;NancyContext&lt;/code&gt;中，通过实现&lt;code&gt;ITokenizer&lt;/code&gt;接口产生。默认实现是&lt;code&gt;Tokenizer&lt;/code&gt;，它提供了一些可配置的方法。默认情况下，它产生一个令牌包含下面部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户名&lt;/li&gt;
&lt;li&gt;Pipe separated list of user claims&lt;/li&gt;
&lt;li&gt;UTC当前时间&lt;/li&gt;
&lt;li&gt;客户端的"User-Agent"头（必须）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;建议配置Tokenizer，使用其他附加能代表用户唯一设备的信息。&lt;/p&gt;
&lt;p&gt;下面举例说明了如何初始化用户认证，并且返回生成的令牌给客户端：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class AuthModule : NancyModule
{
    public AuthModule(ITokenizer tokenizer)
        : base("/auth")
    {
        Post["/"] = x =&amp;gt;
            {
                var userName = (string)this.Request.Form.UserName;
                var password = (string)this.Request.Form.Password;

                var userIdentity = UserDatabase.ValidateUser(userName, password);

                if (userIdentity == null)
                {
                    return HttpStatusCode.Unauthorized;
                }

                var token = tokenizer.Tokenize(userIdentity, Context);

                return new
                    {
                        Token = token,
                    };
            };

        Get["/validation"] = _ =&amp;gt;
            {
                this.RequiresAuthentication();
                return "Yay! You are authenticated!";
            };

        Get["/admin"] = _ =&amp;gt;
        {
            this.RequiresClaims(new[] { "admin" });
            return "Yay! You are authorized!";
        };
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id="732"&gt;7.3.2 客户端配置&lt;/h5&gt;
&lt;p&gt;一旦你的客户端接收到了token，那么你必须使用token来设置HTTP头：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Authorization&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Token&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;your&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;goes&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;here&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="8_1"&gt;8. 幕后的工作&lt;/h4&gt;
&lt;p&gt;https://github.com/NancyFx/Nancy/commit/9ae0a5494bc335c3d940d730ae5d5f18c1018836&lt;/p&gt;</summary><category term="Nancy"></category><category term="C#"></category><category term=".NET"></category><category term="web"></category></entry></feed>